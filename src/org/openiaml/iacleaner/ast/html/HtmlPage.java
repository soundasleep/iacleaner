/* Generated By:JJTree&JavaCC: Do not edit this line. HtmlPage.java */
package org.openiaml.iacleaner.ast.html;

import java.util.*;
import java.io.*;

/** A grammar for web applications, maybe? */
public class HtmlPage/*@bgen(jjtree)*/implements HtmlPageTreeConstants, HtmlPageConstants {/*@bgen(jjtree)*/
  protected static JJTHtmlPageState jjtree = new JJTHtmlPageState();
  public static HtmlPage instance = null;

  /**
   * For loading test cases programatically.
   */
  public static SimpleNode loadFile(File f, int initialState) throws ParseException, FileNotFoundException {
        FileInputStream fis = new FileInputStream(f);
        if (instance == null) {
                instance = new HtmlPage(fis);
        } else {
                ReInit(fis);
        }
        HtmlPageTokenManager.SwitchTo(initialState);
        SimpleNode n = Start();
        return n;
  }

  /**
   * For loading test cases programatically.
   * Works out the initial state based on the file extension of the given
   * file.
   */
  public static SimpleNode loadFile(File f) throws ParseException, FileNotFoundException {
          String extension = f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf("."));

          int initialState = 0;
          if (extension.equals(".html") || extension.equals(".php")) {
                initialState = HTML_STATE;
          } else {
                throw new RuntimeException("Unknown file type: " + extension + " (from file: " + f + ")");
          }

          return loadFile(f, initialState);
  }

  /**
   * Loading string sources.
   * 
   * @throws UnsupportedEncodingException if we have a problem with the charset encoding 
   */
  public static SimpleNode loadString(String s, String charset, int initialState) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
          InputStream fis = new ByteArrayInputStream(s.getBytes(charset));
        if (instance == null) {
                instance = new HtmlPage(fis);
        } else {
                ReInit(fis);
        }
        HtmlPageTokenManager.SwitchTo(initialState);
        SimpleNode n = Start();
        return n;
  }

  /** Loads string sources with a default state of HTML. */
  public static SimpleNode loadString(String s, String charset) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
        return loadString(s, charset, HTML_STATE);
  }

/** Main production. */
  static final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
                       ASTStart jjtn000 = new ASTStart(JJTSTART);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);SimpleNode n;
    try {
      Block();
                  n = jjtn000;
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return n;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Block() throws ParseException {
                /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        HtmlBlock();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_OPEN_TAG:
        case HTML_CLOSING_TAG:
        case HTML_TEXT_BLOCK:
        case HTML_COMMENT_START:
        case HTML_SCRIPT_TAG:
        case PHP_BLOCK_BEGIN:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlBlock() throws ParseException {
                    /*@bgen(jjtree) HtmlBlock */
  ASTHtmlBlock jjtn000 = new ASTHtmlBlock(JJTHTMLBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML_SCRIPT_TAG:
        HtmlScriptTag();
        break;
      case HTML_OPEN_TAG:
        HtmlTag();
        break;
      case HTML_CLOSING_TAG:
        HtmlClosingTag();
        break;
      case HTML_TEXT_BLOCK:
        HtmlTextBlock();
        break;
      case HTML_COMMENT_START:
        HtmlComment();
        break;
      case PHP_BLOCK_BEGIN:
        HtmlPhpInlineBlock();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlPhpInlineBlock() throws ParseException {
                             /*@bgen(jjtree) HtmlPhpInlineBlock */
  ASTHtmlPhpInlineBlock jjtn000 = new ASTHtmlPhpInlineBlock(JJTHTMLPHPINLINEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_BLOCK_BEGIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_SCRIPT:
        PhpBlock();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlScriptTag() throws ParseException {
                        /*@bgen(jjtree) HtmlScriptTag */
  ASTHtmlScriptTag jjtn000 = new ASTHtmlScriptTag(JJTHTMLSCRIPTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HTML_SCRIPT_TAG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_SCRIPT:
        JsBlock();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlTag() throws ParseException {
                           /*@bgen(jjtree) HtmlTag */
                            ASTHtmlTag jjtn000 = new ASTHtmlTag(JJTHTMLTAG);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(HTML_OPEN_TAG);
      t = jj_consume_token(HTML_TAG_NAME);
                jjtn000.setName( t.image );
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_ATTRIBUTE_NAME:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        HtmlTagAttribute();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML_CLOSE_TAG:
        jj_consume_token(HTML_CLOSE_TAG);
        break;
      case HTML_CLOSE_TAG_XHTML:
        jj_consume_token(HTML_CLOSE_TAG_XHTML);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlClosingTag() throws ParseException {
                                         /*@bgen(jjtree) HtmlClosingTag */
                                          ASTHtmlClosingTag jjtn000 = new ASTHtmlClosingTag(JJTHTMLCLOSINGTAG);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(HTML_CLOSING_TAG);
      t = jj_consume_token(HTML_TAG_NAME);
                jjtn000.setName( t.image );
      jj_consume_token(HTML_CLOSE_TAG);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlTagAttribute() throws ParseException {
                                             /*@bgen(jjtree) HtmlTagAttribute */
                                              ASTHtmlTagAttribute jjtn000 = new ASTHtmlTagAttribute(JJTHTMLTAGATTRIBUTE);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HTML_ATTRIBUTE_NAME);
                jjtn000.setName( t.image );
      jj_consume_token(HTML_ATTRIBUTE_EQUALS);
      t = jj_consume_token(HTML_STRING);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                jjtn000.setValue( t.image );
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlTextBlock() throws ParseException {
                                       /*@bgen(jjtree) HtmlTextBlock */
                                        ASTHtmlTextBlock jjtn000 = new ASTHtmlTextBlock(JJTHTMLTEXTBLOCK);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HTML_TEXT_BLOCK);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                jjtn000.setText( t.image );
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlComment() throws ParseException {
                      /*@bgen(jjtree) HtmlComment */
  ASTHtmlComment jjtn000 = new ASTHtmlComment(JJTHTMLCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HTML_COMMENT_START);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsBlock() throws ParseException {
                  /*@bgen(jjtree) JsBlock */
        ASTJsBlock jjtn000 = new ASTJsBlock(JJTJSBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(JS_SCRIPT);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                jjtn000.setScript(t.image);
                jjtn000.parseScript();
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpBlock() throws ParseException {
                   /*@bgen(jjtree) PhpBlock */
        ASTPhpBlock jjtn000 = new ASTPhpBlock(JJTPHPBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PHP_SCRIPT);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                jjtn000.setScript(t.image);
                //jjtThis.parseScript();

    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HtmlPageTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x14c12000,0x14c12000,0x20000000,0x8000000,0x80000,0xc000,};
   }

  /** Constructor with InputStream. */
  public HtmlPage(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HtmlPage(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HtmlPageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public HtmlPage(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HtmlPageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public HtmlPage(HtmlPageTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(HtmlPageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
