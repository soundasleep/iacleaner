/* Generated By:JJTree&JavaCC: Do not edit this line. Javascript.java */
package org.openiaml.iacleaner.ast.js;

import java.util.*;
import java.io.*;

/** A grammar for web applications, maybe? */
public class Javascript/*@bgen(jjtree)*/implements JavascriptTreeConstants, JavascriptConstants {/*@bgen(jjtree)*/
  protected static JJTJavascriptState jjtree = new JJTJavascriptState();
  public static Javascript instance = null;

  /**
   * For loading test cases programatically.
   */
  public static SimpleNode loadFile(File f, int initialState) throws ParseException, FileNotFoundException {
        FileInputStream fis = new FileInputStream(f);
        if (instance == null) {
                instance = new Javascript(fis);
        } else {
                ReInit(fis);
        }
        JavascriptTokenManager.SwitchTo(initialState);
        SimpleNode n;
        n = StartJs();
        return n;
  }

  /**
   * For loading test cases programatically.
   * Works out the initial state based on the file extension of the given
   * file.
   */
  public static SimpleNode loadFile(File f) throws ParseException, FileNotFoundException {
          String extension = f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf("."));

          int initialState = 0;
          if (extension.equals(".js")) {
                initialState = JS_STATE;
          } else {
                throw new RuntimeException("Unknown file type: " + extension + " (from file: " + f + ")");
          }

          return loadFile(f, initialState);
  }

  /**
   * Loading string sources.
   * 
   * @throws UnsupportedEncodingException if we have a problem with the charset encoding 
   */
  public static SimpleNode loadString(String s, String charset, int initialState) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
          InputStream fis = new ByteArrayInputStream(s.getBytes(charset));
        if (instance == null) {
                instance = new Javascript(fis);
        } else {
                ReInit(fis);
        }
        JavascriptTokenManager.SwitchTo(initialState);
        SimpleNode n;
        n = StartJs();
        return n;
  }

  /** Loads string sources with a default state of JS. */
  public static SimpleNode loadString(String s, String charset) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
        return loadString(s, charset, JS_STATE);
  }

/* JS_VARIABLE === JS_FUNCTION_NAME */

/** Main production. */
  static final public SimpleNode StartJs() throws ParseException {
                        /*@bgen(jjtree) StartJs */
                         ASTStartJs jjtn000 = new ASTStartJs(JJTSTARTJS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);SimpleNode n;
    try {
      JsBlock();
                    n = jjtn000;
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return n;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void JsBlock() throws ParseException {
                  /*@bgen(jjtree) JsBlock */
  ASTJsBlock jjtn000 = new ASTJsBlock(JJTJSBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        JsStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_FUNCTION_STATEMENT:
        case JS_RETURN_STATEMENT:
        case JS_NEW_STATEMENT:
        case JS_VAR_STATEMENT:
        case JS_IF_STATEMENT:
        case JS_FOR_STATEMENT:
        case JS_TRY_STATEMENT:
        case JS_THROW_STATEMENT:
        case JS_BRACE_OPEN:
        case JS_END:
        case JS_VARIABLE:
        case JS_SCRIPT_END:
        case PHP_BLOCK_BEGIN:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsStatement() throws ParseException {
                      /*@bgen(jjtree) JsStatement */
  ASTJsStatement jjtn000 = new ASTJsStatement(JJTJSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
        JsFunctionDefinition();
        break;
      case JS_IF_STATEMENT:
        JsIfStatement();
        break;
      case JS_FOR_STATEMENT:
        JsForStatement();
        break;
      case JS_RETURN_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_VAR_STATEMENT:
      case JS_VARIABLE:
        JsLanguageStatement();
        break;
      case JS_BRACE_OPEN:
        jj_consume_token(JS_BRACE_OPEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_FUNCTION_STATEMENT:
        case JS_RETURN_STATEMENT:
        case JS_NEW_STATEMENT:
        case JS_VAR_STATEMENT:
        case JS_IF_STATEMENT:
        case JS_FOR_STATEMENT:
        case JS_TRY_STATEMENT:
        case JS_THROW_STATEMENT:
        case JS_BRACE_OPEN:
        case JS_END:
        case JS_VARIABLE:
        case JS_SCRIPT_END:
        case PHP_BLOCK_BEGIN:
          JsBlock();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(JS_BRACE_CLOSE);
        break;
      case JS_TRY_STATEMENT:
        JsTryCatchBlock();
        break;
      case JS_THROW_STATEMENT:
        JsThrowStatement();
        break;
      case PHP_BLOCK_BEGIN:
        JsPhpInlineBlock();
        break;
      case JS_SCRIPT_END:
        jj_consume_token(JS_SCRIPT_END);
        break;
      case JS_END:
        jj_consume_token(JS_END);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsPhpInlineBlock() throws ParseException {
                           /*@bgen(jjtree) JsPhpInlineBlock */
  ASTJsPhpInlineBlock jjtn000 = new ASTJsPhpInlineBlock(JJTJSPHPINLINEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_BLOCK_BEGIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_SCRIPT:
        PhpBlock();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsLanguageStatement() throws ParseException {
                              /*@bgen(jjtree) JsLanguageStatement */
  ASTJsLanguageStatement jjtn000 = new ASTJsLanguageStatement(JJTJSLANGUAGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_RETURN_STATEMENT:
        JsReturnStatement();
        break;
      case JS_VAR_STATEMENT:
        jj_consume_token(JS_VAR_STATEMENT);
        jj_consume_token(JS_VARIABLE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_EQUAL:
          jj_consume_token(JS_EQUAL);
          JsValuePossiblyWrapped();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
      case JS_VARIABLE:
        jj_consume_token(JS_VARIABLE);
        JsTraverseObjects();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_ASSIGNMENT_OPERATOR:
        case JS_OPERATOR_SINGLE:
        case JS_EQUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case JS_ASSIGNMENT_OPERATOR:
          case JS_EQUAL:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case JS_EQUAL:
              jj_consume_token(JS_EQUAL);
              break;
            case JS_ASSIGNMENT_OPERATOR:
              jj_consume_token(JS_ASSIGNMENT_OPERATOR);
              break;
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            JsValuePossiblyWrapped();
            break;
          case JS_OPERATOR_SINGLE:
            jj_consume_token(JS_OPERATOR_SINGLE);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        break;
      case JS_NEW_STATEMENT:
        JsNewStatement();
        JsTraverseObjects();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsTraverseObjects() throws ParseException {
                            /*@bgen(jjtree) JsTraverseObjects */
  ASTJsTraverseObjects jjtn000 = new ASTJsTraverseObjects(JJTJSTRAVERSEOBJECTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_BRACKET_OPEN:
        case JS_ARRAY_OPEN:
        case JS_OBJECT_OPERATOR:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_BRACKET_OPEN:
          jj_consume_token(JS_BRACKET_OPEN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case JS_FUNCTION_STATEMENT:
          case JS_NEW_STATEMENT:
          case JS_BRACKET_OPEN:
          case JS_BRACE_OPEN:
          case JS_STRING:
          case JS_STRING_SQ:
          case JS_DECIMAL:
          case JS_HEXADECIMAL:
          case JS_BUILTIN:
          case JS_PREFIX_OPERATOR:
          case JS_NUMBER_OPERATOR:
          case JS_VARIABLE:
          case PHP_BLOCK_BEGIN:
            JsArgumentList();
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          jj_consume_token(JS_BRACKET_CLOSE);
          break;
        case JS_OBJECT_OPERATOR:
          jj_consume_token(JS_OBJECT_OPERATOR);
          jj_consume_token(JS_VARIABLE);
          break;
        case JS_ARRAY_OPEN:
          JsSelectArray();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsSelectArray() throws ParseException {
                        /*@bgen(jjtree) JsSelectArray */
  ASTJsSelectArray jjtn000 = new ASTJsSelectArray(JJTJSSELECTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_ARRAY_OPEN);
      JsValuePossiblyWrapped();
      jj_consume_token(JS_ARRAY_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsReturnStatement() throws ParseException {
                            /*@bgen(jjtree) JsReturnStatement */
  ASTJsReturnStatement jjtn000 = new ASTJsReturnStatement(JJTJSRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_RETURN_STATEMENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_BRACKET_OPEN:
      case JS_BRACE_OPEN:
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_PREFIX_OPERATOR:
      case JS_NUMBER_OPERATOR:
      case JS_VARIABLE:
      case PHP_BLOCK_BEGIN:
        JsValuePossiblyWrapped();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsNewStatement() throws ParseException {
                         /*@bgen(jjtree) JsNewStatement */
  ASTJsNewStatement jjtn000 = new ASTJsNewStatement(JJTJSNEWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_NEW_STATEMENT);
      jj_consume_token(JS_VARIABLE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsValue() throws ParseException {
                  /*@bgen(jjtree) JsValue */
  ASTJsValue jjtn000 = new ASTJsValue(JJTJSVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_VARIABLE:
        jj_consume_token(JS_VARIABLE);
        break;
      case JS_NEW_STATEMENT:
        JsNewStatement();
        break;
      case JS_FUNCTION_STATEMENT:
        JsAnonymousFunction();
        break;
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_NUMBER_OPERATOR:
        JsSimpleValue();
        break;
      case PHP_BLOCK_BEGIN:
        JsPhpInlineBlock();
        break;
      case JS_BRACE_OPEN:
        jj_consume_token(JS_BRACE_OPEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_FUNCTION_STATEMENT:
        case JS_NEW_STATEMENT:
        case JS_BRACKET_OPEN:
        case JS_BRACE_OPEN:
        case JS_STRING:
        case JS_STRING_SQ:
        case JS_DECIMAL:
        case JS_HEXADECIMAL:
        case JS_BUILTIN:
        case JS_PREFIX_OPERATOR:
        case JS_NUMBER_OPERATOR:
        case JS_VARIABLE:
        case PHP_BLOCK_BEGIN:
          JsInlineArray();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(JS_BRACE_CLOSE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      JsTraverseObjects();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsValuePossiblyWrapped() throws ParseException {
                                 /*@bgen(jjtree) JsValuePossiblyWrapped */
  ASTJsValuePossiblyWrapped jjtn000 = new ASTJsValuePossiblyWrapped(JJTJSVALUEPOSSIBLYWRAPPED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_PREFIX_OPERATOR:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_3;
        }
        jj_consume_token(JS_PREFIX_OPERATOR);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_BRACKET_OPEN:
        jj_consume_token(JS_BRACKET_OPEN);
        JsValuePossiblyWrapped();
        jj_consume_token(JS_BRACKET_CLOSE);
        break;
      case JS_FUNCTION_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_BRACE_OPEN:
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_NUMBER_OPERATOR:
      case JS_VARIABLE:
      case PHP_BLOCK_BEGIN:
        JsValue();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_NUMBER_OPERATOR:
      case JS_OPERATOR:
      case JS_ASSIGNMENT_OPERATOR:
      case JS_OPERATOR_SINGLE:
      case JS_EQUAL:
      case JS_TERNARY_1:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_OPERATOR:
          jj_consume_token(JS_OPERATOR);
          JsValuePossiblyWrapped();
          break;
        case JS_NUMBER_OPERATOR:
          jj_consume_token(JS_NUMBER_OPERATOR);
          JsValuePossiblyWrapped();
          break;
        case JS_ASSIGNMENT_OPERATOR:
          jj_consume_token(JS_ASSIGNMENT_OPERATOR);
          JsValuePossiblyWrapped();
          break;
        case JS_EQUAL:
          jj_consume_token(JS_EQUAL);
          JsValuePossiblyWrapped();
          break;
        case JS_TERNARY_1:
          jj_consume_token(JS_TERNARY_1);
          JsValuePossiblyWrapped();
          jj_consume_token(JS_TERNARY_2);
          JsValuePossiblyWrapped();
          break;
        case JS_OPERATOR_SINGLE:
          jj_consume_token(JS_OPERATOR_SINGLE);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsSimpleValue() throws ParseException {
                        /*@bgen(jjtree) JsSimpleValue */
  ASTJsSimpleValue jjtn000 = new ASTJsSimpleValue(JJTJSSIMPLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_STRING:
        jj_consume_token(JS_STRING);
        break;
      case JS_STRING_SQ:
        jj_consume_token(JS_STRING_SQ);
        break;
      case JS_DECIMAL:
      case JS_NUMBER_OPERATOR:
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case JS_NUMBER_OPERATOR:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_4;
          }
          jj_consume_token(JS_NUMBER_OPERATOR);
        }
        jj_consume_token(JS_DECIMAL);
        break;
      case JS_HEXADECIMAL:
        jj_consume_token(JS_HEXADECIMAL);
        break;
      case JS_BUILTIN:
        jj_consume_token(JS_BUILTIN);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsArgumentList() throws ParseException {
                         /*@bgen(jjtree) JsArgumentList */
  ASTJsArgumentList jjtn000 = new ASTJsArgumentList(JJTJSARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JsValuePossiblyWrapped();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsArgumentList();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsVariableList() throws ParseException {
                         /*@bgen(jjtree) JsVariableList */
  ASTJsVariableList jjtn000 = new ASTJsVariableList(JJTJSVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsVariableList();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsFunctionDefinition() throws ParseException {
                               /*@bgen(jjtree) JsFunctionDefinition */
  ASTJsFunctionDefinition jjtn000 = new ASTJsFunctionDefinition(JJTJSFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_FUNCTION_STATEMENT);
      jj_consume_token(JS_VARIABLE);
      jj_consume_token(JS_BRACKET_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_VARIABLE:
        JsFunctionArgumentList();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(JS_BRACKET_CLOSE);
      jj_consume_token(JS_BRACE_OPEN);
      JsBlock();
      jj_consume_token(JS_BRACE_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsFunctionArgumentList() throws ParseException {
                                 /*@bgen(jjtree) JsFunctionArgumentList */
  ASTJsFunctionArgumentList jjtn000 = new ASTJsFunctionArgumentList(JJTJSFUNCTIONARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_EQUAL:
        jj_consume_token(JS_EQUAL);
        JsSimpleValue();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsFunctionArgumentList();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsAnonymousFunction() throws ParseException {
                              /*@bgen(jjtree) JsAnonymousFunction */
  ASTJsAnonymousFunction jjtn000 = new ASTJsAnonymousFunction(JJTJSANONYMOUSFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_FUNCTION_STATEMENT);
      jj_consume_token(JS_BRACKET_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_VARIABLE:
        JsFunctionArgumentList();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(JS_BRACKET_CLOSE);
      jj_consume_token(JS_BRACE_OPEN);
      JsBlock();
      jj_consume_token(JS_BRACE_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsIfStatement() throws ParseException {
                        /*@bgen(jjtree) JsIfStatement */
  ASTJsIfStatement jjtn000 = new ASTJsIfStatement(JJTJSIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_IF_STATEMENT);
      jj_consume_token(JS_BRACKET_OPEN);
      JsValuePossiblyWrapped();
      jj_consume_token(JS_BRACKET_CLOSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_RETURN_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_VAR_STATEMENT:
      case JS_IF_STATEMENT:
      case JS_FOR_STATEMENT:
      case JS_TRY_STATEMENT:
      case JS_THROW_STATEMENT:
      case JS_BRACE_OPEN:
      case JS_END:
      case JS_VARIABLE:
      case JS_SCRIPT_END:
      case PHP_BLOCK_BEGIN:
        JsBlock();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      if (jj_2_1(2)) {
        jj_consume_token(JS_ELSE_STATEMENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_FUNCTION_STATEMENT:
        case JS_RETURN_STATEMENT:
        case JS_NEW_STATEMENT:
        case JS_VAR_STATEMENT:
        case JS_IF_STATEMENT:
        case JS_FOR_STATEMENT:
        case JS_TRY_STATEMENT:
        case JS_THROW_STATEMENT:
        case JS_BRACE_OPEN:
        case JS_END:
        case JS_VARIABLE:
        case JS_SCRIPT_END:
        case PHP_BLOCK_BEGIN:
          JsBlock();
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsForStatement() throws ParseException {
                         /*@bgen(jjtree) JsForStatement */
  ASTJsForStatement jjtn000 = new ASTJsForStatement(JJTJSFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_FOR_STATEMENT);
      jj_consume_token(JS_BRACKET_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_RETURN_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_VAR_STATEMENT:
      case JS_VARIABLE:
        JsForParameterList();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(JS_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_BRACKET_OPEN:
      case JS_BRACE_OPEN:
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_PREFIX_OPERATOR:
      case JS_NUMBER_OPERATOR:
      case JS_VARIABLE:
      case PHP_BLOCK_BEGIN:
        JsForEvaluateParameterList();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(JS_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_BRACKET_OPEN:
      case JS_BRACE_OPEN:
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_PREFIX_OPERATOR:
      case JS_NUMBER_OPERATOR:
      case JS_VARIABLE:
      case PHP_BLOCK_BEGIN:
        JsForEvaluateParameterList();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(JS_BRACKET_CLOSE);
      jj_consume_token(JS_BRACE_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_RETURN_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_VAR_STATEMENT:
      case JS_IF_STATEMENT:
      case JS_FOR_STATEMENT:
      case JS_TRY_STATEMENT:
      case JS_THROW_STATEMENT:
      case JS_BRACE_OPEN:
      case JS_END:
      case JS_VARIABLE:
      case JS_SCRIPT_END:
      case PHP_BLOCK_BEGIN:
        JsBlock();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(JS_BRACE_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsForParameterList() throws ParseException {
                             /*@bgen(jjtree) JsForParameterList */
  ASTJsForParameterList jjtn000 = new ASTJsForParameterList(JJTJSFORPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JsLanguageStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsForParameterList();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsForEvaluateParameterList() throws ParseException {
                                     /*@bgen(jjtree) JsForEvaluateParameterList */
  ASTJsForEvaluateParameterList jjtn000 = new ASTJsForEvaluateParameterList(JJTJSFOREVALUATEPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JsValuePossiblyWrapped();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsForEvaluateParameterList();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* inline arrays: { a:3, b:function() {...}, c:"kittens", } */
  static final public void JsInlineArray() throws ParseException {
                        /*@bgen(jjtree) JsInlineArray */
  ASTJsInlineArray jjtn000 = new ASTJsInlineArray(JJTJSINLINEARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        jj_consume_token(JS_VARIABLE);
        jj_consume_token(JS_TERNARY_2);
      } else {
        ;
      }
      JsValuePossiblyWrapped();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_FUNCTION_STATEMENT:
        case JS_NEW_STATEMENT:
        case JS_BRACKET_OPEN:
        case JS_BRACE_OPEN:
        case JS_STRING:
        case JS_STRING_SQ:
        case JS_DECIMAL:
        case JS_HEXADECIMAL:
        case JS_BUILTIN:
        case JS_PREFIX_OPERATOR:
        case JS_NUMBER_OPERATOR:
        case JS_VARIABLE:
        case PHP_BLOCK_BEGIN:
          JsInlineArray();
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsThrowStatement() throws ParseException {
                           /*@bgen(jjtree) JsThrowStatement */
  ASTJsThrowStatement jjtn000 = new ASTJsThrowStatement(JJTJSTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_THROW_STATEMENT);
      JsValue();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsTryCatchBlock() throws ParseException {
                          /*@bgen(jjtree) JsTryCatchBlock */
  ASTJsTryCatchBlock jjtn000 = new ASTJsTryCatchBlock(JJTJSTRYCATCHBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_TRY_STATEMENT);
      jj_consume_token(JS_BRACE_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_RETURN_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_VAR_STATEMENT:
      case JS_IF_STATEMENT:
      case JS_FOR_STATEMENT:
      case JS_TRY_STATEMENT:
      case JS_THROW_STATEMENT:
      case JS_BRACE_OPEN:
      case JS_END:
      case JS_VARIABLE:
      case JS_SCRIPT_END:
      case PHP_BLOCK_BEGIN:
        JsBlock();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(JS_BRACE_CLOSE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_CATCH_STATEMENT:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_5;
        }
        jj_consume_token(JS_CATCH_STATEMENT);
        jj_consume_token(JS_BRACKET_OPEN);
        jj_consume_token(JS_VARIABLE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_IF_STATEMENT:
          jj_consume_token(JS_IF_STATEMENT);
          JsValuePossiblyWrapped();
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        jj_consume_token(JS_BRACKET_CLOSE);
        jj_consume_token(JS_BRACE_OPEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_FUNCTION_STATEMENT:
        case JS_RETURN_STATEMENT:
        case JS_NEW_STATEMENT:
        case JS_VAR_STATEMENT:
        case JS_IF_STATEMENT:
        case JS_FOR_STATEMENT:
        case JS_TRY_STATEMENT:
        case JS_THROW_STATEMENT:
        case JS_BRACE_OPEN:
        case JS_END:
        case JS_VARIABLE:
        case JS_SCRIPT_END:
        case PHP_BLOCK_BEGIN:
          JsBlock();
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        jj_consume_token(JS_BRACE_CLOSE);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FINALLY_STATEMENT:
        jj_consume_token(JS_FINALLY_STATEMENT);
        jj_consume_token(JS_BRACE_OPEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_FUNCTION_STATEMENT:
        case JS_RETURN_STATEMENT:
        case JS_NEW_STATEMENT:
        case JS_VAR_STATEMENT:
        case JS_IF_STATEMENT:
        case JS_FOR_STATEMENT:
        case JS_TRY_STATEMENT:
        case JS_THROW_STATEMENT:
        case JS_BRACE_OPEN:
        case JS_END:
        case JS_VARIABLE:
        case JS_SCRIPT_END:
        case PHP_BLOCK_BEGIN:
          JsBlock();
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        jj_consume_token(JS_BRACE_CLOSE);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpBlock() throws ParseException {
                   /*@bgen(jjtree) PhpBlock */
        ASTPhpBlock jjtn000 = new ASTPhpBlock(JJTPHPBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PHP_SCRIPT);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                jjtn000.setScript(t.image);
                //jjtThis.parseScript();

    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(PHP_BLOCK_BEGIN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(JS_FOR_STATEMENT)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(JS_ELSE_STATEMENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(JS_BRACE_OPEN)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(JS_NEW_STATEMENT)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(JS_IF_STATEMENT)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(JS_TRY_STATEMENT)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(JS_RETURN_STATEMENT)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(JS_THROW_STATEMENT)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    if (jj_3R_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(JS_VARIABLE)) return true;
    if (jj_scan_token(JS_TERNARY_2)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(JS_VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(JS_FUNCTION_STATEMENT)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(JS_VAR_STATEMENT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavascriptTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x88bf800,0x88bf800,0x88bf800,0x0,0x0,0x0,0x0,0x0,0x7000,0x2200000,0xc0a02800,0x2200000,0xc0a02800,0xc0a02800,0xc0802800,0x0,0xc0a02800,0x0,0x0,0x0,0xc0000000,0x10000000,0x10000000,0x0,0x0,0x10000000,0x0,0x88bf800,0x88bf800,0x7000,0xc0a02800,0xc0a02800,0x88bf800,0x10000000,0x10000000,0xc0a02800,0x10000000,0x88bf800,0x40000,0x8000,0x88bf800,0x88bf800,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7000,0x7000,0x7000,0x8000,0x200,0x280,0x380,0x380,0x1000,0x8,0x5037,0x8,0x5037,0x5037,0x5027,0x10,0x5027,0x7e0,0x7e0,0x20,0x27,0x0,0x0,0x1000,0x200,0x0,0x1000,0x7000,0x7000,0x1000,0x5037,0x5037,0x7000,0x0,0x0,0x5037,0x0,0x7000,0x0,0x0,0x7000,0x7000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Javascript(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Javascript(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavascriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Javascript(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavascriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Javascript(JavascriptTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavascriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
