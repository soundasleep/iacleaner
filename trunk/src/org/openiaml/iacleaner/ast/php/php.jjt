
options {
  MULTI=true;
  VISITOR=true;
  // NODE_DEFAULT_VOID=true; /* makes all nodes #void by default, reducing the number of elements generated */
}

PARSER_BEGIN(PhpPage)

package org.openiaml.iacleaner.ast.php;

import java.util.*;
import java.io.*;

/** A grammar for web applications, maybe? */
public class PhpPage {

  public static PhpPage instance = null;
  
  /**
   * For loading test cases programatically.
   */
  public static SimpleNode loadFile(File f, int initialState) throws ParseException, FileNotFoundException {
  	FileInputStream fis = new FileInputStream(f);
  	if (instance == null) {
  		instance = new PhpPage(fis);
  	} else {
  		ReInit(fis);
  	}
  	PhpPageTokenManager.SwitchTo(initialState);
  	SimpleNode n = Start();
  	return n;
  }

  /**
   * For loading test cases programatically.
   * Works out the initial state based on the file extension of the given
   * file.
   */
  public static SimpleNode loadFile(File f) throws ParseException, FileNotFoundException {
	  String extension = f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf("."));
	  
	  int initialState = 0;
  	  throw new RuntimeException("Unknown file type: " + extension + " (from file: " + f + ")");
	  
	  //return loadFile(f, initialState);
  }

  /**
   * Loading string sources.
   * 
   * @throws UnsupportedEncodingException if we have a problem with the charset encoding 
   */
  public static SimpleNode loadString(String s, String charset, int initialState) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
	  InputStream fis = new ByteArrayInputStream(s.getBytes(charset));
 	if (instance == null) {
  		instance = new PhpPage(fis);
  	} else {
  		ReInit(fis);
  	}
  	PhpPageTokenManager.SwitchTo(initialState);
  	SimpleNode n = Start();
 	return n;
  }

  /** Loads string sources with a default state of HTML. */
  public static SimpleNode loadString(String s, String charset) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
  	return loadString(s, charset, DEFAULT);
  }
  
}

PARSER_END(PhpPage)

<DEFAULT>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "/*" : PHP_WITHIN_COMMENT
| "//" : PHP_WITHIN_COMMENT_SINGLE
}

/* order also matters: by placing this before the matchall, the comments will be properly ended. */
<PHP_WITHIN_COMMENT>
SKIP:
{
	< "*/" > : DEFAULT
}

<PHP_WITHIN_COMMENT>
MORE:
{
	< ~[] >
}

/* order also matters: by placing this before the matchall, the comments will be properly ended. */
<PHP_WITHIN_COMMENT_SINGLE>
SKIP:
{
	< ["\r","\n"] > : DEFAULT
}

<PHP_WITHIN_COMMENT_SINGLE>
MORE:
{
	< ~["\r","\n"] >
}

/* php reserved words */

TOKEN :
{
	< ECHO_STATEMENT: "echo" >
}

TOKEN :
{
	< FUNCTION_STATEMENT: "function" >
}

TOKEN :
{
	< RETURN_STATEMENT: "return" >
}

TOKEN :
{
	< GLOBAL_STATEMENT: "global" >
}

TOKEN :
{
	< NEW_STATEMENT: "new" >
}

TOKEN :
{
	< OR_STATEMENT: "or" >
}

TOKEN :
{
	< VAR_STATEMENT: "var" >
}

TOKEN :
{
	< CLASS_STATEMENT: "class" >
}

TOKEN :
{
	< INTERFACE_STATEMENT: "interface" >
}

TOKEN :
{
	< IMPLEMENTS_STATEMENT: "implements" >
}

TOKEN :
{
	< EXTENDS_STATEMENT: "extends" >
}

TOKEN :
{
	< ACCESS_MODIFIER: "public" | "private" | "protected" >
}

TOKEN :
{
	< PHP_TRY_STATEMENT: "try" >
}

TOKEN :
{
	< PHP_CATCH_STATEMENT: "catch" >
}

TOKEN :
{
	< PHP_THROW_STATEMENT: "throw" >
}

TOKEN :
{
	< PHP_FINALLY_STATEMENT: "finally" >
}

TOKEN :
{
	< PHP_DIE_STATEMENT: "die" >
}

TOKEN :
{
	< PHP_EXIT_STATEMENT: "exit" >
}

TOKEN : /* if statement */
{
	< PHP_IF_STATEMENT:
		"if" >
}

TOKEN : /* else statement */
{
	< PHP_ELSE_STATEMENT:
		"else" >
}

TOKEN : /* STRING */
{
	< STRING:
		"\"" ("\\\"" | (~["\""]))* "\"" >
}

TOKEN : /* STRING (single quoted) */
{
	< STRING_SQ:
		"'" ("\\'" | (~["'"]))* "'" >
}

TOKEN : /* Decimal */
{
	< DECIMAL:
		(["0"-"9"])+
		( "." (["0"-"9"]) * )? >	/* can have numbers after the decimal point */
}

TOKEN : /* Hexaecimal */
{
	< HEXADECIMAL:
		"0x" (["0"-"9","a"-"f"])+ >
}

TOKEN : /* built in variables */
{
	< PHP_BUILTIN:
		"true" | "false" | "null" >
}

TOKEN : /* Function name */
{
	< PHP_FUNCTION_NAME:
		["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

TOKEN : /* variable */
{
	< PHP_VARIABLE:
		"$" 
		["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

TOKEN :
{
	< PHP_OBJECT_OPERATOR: "::" >
}

TOKEN : /* operator -- includes '=>' for arrays */
{
	< PHP_OPERATOR:
		"+" | "-" | "*" | "/" | "%" | "." | "==" | "!=" | "<" | ">" | "<=" | ">=" | "->" | "=>" >
}

TOKEN : /* prefix operator */
{
	< PHP_PREFIX_OPERATOR:
		"!" >
}

TOKEN :
{
	<PHP_BLOCK_END : 
		"?>" > : HTML_STATE
		
}

<HTML_STATE>
TOKEN :
{
	<PHP_BLOCK_BEGIN : 
		"<?php" > : DEFAULT
}

/** Main production. */
SimpleNode Start() : { SimpleNode n; }
{
	Block() { n = jjtThis; }
	<EOF>
	{ return n; }
}

void Block() : {}
{
	(
		PhpRootBlock()
	)+
}

void PhpRootBlock() : {}
{
	<PHP_BLOCK_BEGIN>
	PhpBlock()
}

void PhpBlock() : {}
{
	( PhpStatement() 
	  | PhpInlineHtmlBlock() )*
}

/** 
 * this is different to a normal HtmlBlock because these are actually in
 * function structures, e.g. if (true) { [html] }
 */
void PhpInlineHtmlBlock() : {}
{
	<PHP_BLOCK_END>
 /*
	(HtmlBlock() )*
	*/
	(<PHP_BLOCK_BEGIN> | <EOF> )
}

void PhpStatement() : {}
{
	PhpFunctionDefinition() 
	| PhpLanguageStatement() ";"
	| PhpIfStatement()
	| (<ACCESS_MODIFIER>)?
		( PhpClassDefinition() | PhpInterfaceDefinition() ) 
	| PhpTryCatchBlock()
}

void PhpLanguageStatement() : {}
{
	<ECHO_STATEMENT> PhpValuePossiblyWrapped()
	| <PHP_THROW_STATEMENT> PhpValue()
	| <PHP_DIE_STATEMENT> (
			PhpValuePossiblyWrapped()
		)?
	| (PhpFunctionCall() "(" (PhpArgumentList())? ")"
		(PhpOrSomething()) ?)
	| <RETURN_STATEMENT> (PhpValuePossiblyWrapped() (PhpOrSomething()) ?)?
	| <GLOBAL_STATEMENT> PhpVariableList()
	| PhpVariableAssignment()
}

void PhpVariableAssignment() : {}
{
	<PHP_VARIABLE> 
		(<PHP_OBJECT_OPERATOR> (<PHP_VARIABLE> | <PHP_FUNCTION_NAME>))* 
		( PhpSelectArray()) ?
		"=" PhpValuePossiblyWrapped() (PhpOrSomething()) ?
}

void PhpFunctionCall() : {}
{
	<PHP_FUNCTION_NAME>
	( <PHP_OBJECT_OPERATOR> <PHP_FUNCTION_NAME> )*
}

void PhpOrSomething() : {}
{
	<OR_STATEMENT> <PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")"
}

void PhpTryCatchBlock() : {}
{
	<PHP_TRY_STATEMENT> "{"
		PhpBlock()
	"}" 
	(<PHP_CATCH_STATEMENT> "(" <PHP_FUNCTION_NAME> <PHP_VARIABLE> ")" "{"
		PhpBlock()
	"}")*
	(<PHP_FINALLY_STATEMENT> "{"
		PhpBlock()
	"}")?
}

void PhpValue() : {}
{
	(<PHP_PREFIX_OPERATOR>) *		/* e.g. !true */
	
	(
	  (<PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")")
	  | (<NEW_STATEMENT> <PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")")
	  | (<PHP_VARIABLE>)
	  | (PhpSimpleValue()) 
	)

	( PhpSelectArray()) ?		/* e.g $a[1][2][3] */

}

void PhpValuePossiblyWrapped() : {}
{
	(( "(" PhpValuePossiblyWrapped() ")" ) | PhpValue() )

	(
		/* e.g. "f() + 42" */
		(<PHP_OPERATOR> PhpValuePossiblyWrapped())
		|
		/* e.g. "f() ? 1 : 2" */
		("?" PhpValuePossiblyWrapped() ":" PhpValuePossiblyWrapped()) 
	)?

}

void PhpSimpleValue() : {}
{
	<STRING> | <STRING_SQ> | <DECIMAL> | <HEXADECIMAL> | <PHP_BUILTIN>
}

void PhpSelectArray() : {}
{
	"[" PhpValuePossiblyWrapped() "]" 
	(PhpSelectArray()) ? 
}

/* this has a special case to allow for array(1,2,) */
void PhpArgumentList() : {}
{
	PhpValuePossiblyWrapped() ("," (PhpArgumentList())? )?
}

void PhpVariableList() : {}
{
	<PHP_VARIABLE> ("," PhpVariableList())?
}

void PhpFunctionDefinition() : {}
{
	<FUNCTION_STATEMENT> 
	<PHP_FUNCTION_NAME> "(" (PhpFunctionArgumentList()) ? ")"
	"{"
		PhpBlock()
	"}"
}

void PhpFunctionArgumentList() : {}
{
	<PHP_VARIABLE>
	( "=" PhpSimpleValue() )?
	( "," PhpFunctionArgumentList() )?
}

void PhpIfStatement() : {}
{
	<PHP_IF_STATEMENT> "(" PhpValuePossiblyWrapped() ")" "{" PhpBlock() "}"
	( <PHP_ELSE_STATEMENT> "{" PhpBlock() "}" ) ?
}

void PhpClassDefinition() : {}
{
	<CLASS_STATEMENT> <PHP_FUNCTION_NAME>
	( 
		( <EXTENDS_STATEMENT> <PHP_FUNCTION_NAME>
			( <IMPLEMENTS_STATEMENT> PhpInterfaceList() )?
		)
		| ( <IMPLEMENTS_STATEMENT> PhpInterfaceList() 
			( <EXTENDS_STATEMENT> <PHP_FUNCTION_NAME> )?
		)
	)?
	"{"
		PhpClassBlock()
	"}"		
}

void PhpInterfaceDefinition() : {}
{
	<INTERFACE_STATEMENT> <PHP_FUNCTION_NAME>
	( 
		( <EXTENDS_STATEMENT> PhpInterfaceList() )
	)?
	"{"
		PhpInterfaceBlock()
	"}"		
}

void PhpInterfaceList() : {}
{
	<PHP_FUNCTION_NAME> ("," PhpInterfaceList())?
}

void PhpClassBlock() : {}
{
	(
		(<ACCESS_MODIFIER>)?
		(
			<VAR_STATEMENT> PhpFunctionArgumentList() ";"
			| PhpFunctionDefinition()
		)
	)*
}

void PhpInterfaceBlock() : {}
{
	(
		(<ACCESS_MODIFIER>)?
		(
			<FUNCTION_STATEMENT> <PHP_FUNCTION_NAME> "(" (PhpFunctionArgumentList()) ? ")" ";"
		)
	)*
}

