
options {
  MULTI=true;
  VISITOR=true;
  // NODE_DEFAULT_VOID=true; /* makes all nodes #void by default, reducing the number of elements generated */
}

PARSER_BEGIN(InternetApplication)

package org.openiaml.iacleaner.ast;

import java.util.*;
import java.io.*;

/** A grammar for web applications, maybe? */
public class InternetApplication {

  public static InternetApplication instance = null;
  
  /**
   * For loading test cases programatically.
   */
  public static SimpleNode loadFile(File f) throws ParseException, FileNotFoundException {
  	FileInputStream fis = new FileInputStream(f);
  	if (instance == null) {
  		instance = new InternetApplication(fis);
  	} else {
  		ReInit(fis);
  	}
  	InternetApplicationTokenManager.SwitchTo(HTML_STATE);
 	SimpleNode n = Start();
  	return n;
  }


  /**
   * Loading string sources.
   * 
   * @throws UnsupportedEncodingException if we have a problem with the charset encoding 
   */
  public static SimpleNode loadString(String s, String charset) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
	  InputStream fis = new ByteArrayInputStream(s.getBytes(charset));
 	if (instance == null) {
  		instance = new InternetApplication(fis);
  	} else {
  		ReInit(fis);
  	}
  	InternetApplicationTokenManager.SwitchTo(HTML_STATE);
 	SimpleNode n = Start();
  	return n;
  }
  
}

PARSER_END(InternetApplication)

<HTML_STATE>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<HTML_TAG_STATE>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<HTML_OPENING_TAG>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<DEFAULT>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* php reserved words */

TOKEN :
{
	< ECHO_STATEMENT: "echo" >
}

TOKEN :
{
	< FUNCTION_STATEMENT: "function" >
}

TOKEN :
{
	< RETURN_STATEMENT: "return" >
}

TOKEN :
{
	< GLOBAL_STATEMENT: "global" >
}

TOKEN :
{
	< NEW_STATEMENT: "new" >
}

TOKEN :
{
	< VAR_STATEMENT: "var" >
}

TOKEN :
{
	< CLASS_STATEMENT: "class" >
}

TOKEN :
{
	< INTERFACE_STATEMENT: "interface" >
}

TOKEN :
{
	< IMPLEMENTS_STATEMENT: "implements" >
}

TOKEN :
{
	< EXTENDS_STATEMENT: "extends" >
}

TOKEN :
{
	< ACCESS_MODIFIER: "public" | "private" | "protected" >
}

TOKEN : /* if statement */
{
	< PHP_IF_STATEMENT:
		"if" >
}

TOKEN : /* else statement */
{
	< PHP_ELSE_STATEMENT:
		"else" >
}

TOKEN : /* STRING */
{
	< STRING:
		"\"" ("\\\"" | (~["\""]))+ "\"" >
}

TOKEN : /* Decimal */
{
	< DECIMAL:
		(["0"-"9"])+
		( "." (["0"-"9"]) * )? >	/* can have numbers after the decimal point */
}

TOKEN : /* Hexaecimal */
{
	< HEXADECIMAL:
		"0x" (["0"-"9","a"-"f"])+ >
}

TOKEN : /* built in variables */
{
	< PHP_BUILTIN:
		"true" | "false" | "null" >
}

TOKEN : /* Function name */
{
	< PHP_FUNCTION_NAME:
		["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

TOKEN : /* single line comment */
{
	< PHP_SINGLE_COMMENT:
		"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

TOKEN : /* multi line comment */
{
	< PHP_MULTI_COMMENT:
		"/" "*" 
		(~["\0"])* 			/* we assume that php files cannot contain the null character */
		"*" "/" >
}

TOKEN : /* variable */
{
	< PHP_VARIABLE:
		"$" 
		["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

TOKEN : /* operator */
{
	< PHP_OPERATOR:
		"+" | "-" | "*" | "/" | "%" | "." | "==" | "!=" | "<" | ">" | "<=" | ">=" | "->" >
}

TOKEN :
{
	<PHP_BLOCK_END : 
		"?>" > : HTML_STATE
		
}

<HTML_STATE>
TOKEN :
{
	<PHP_BLOCK_BEGIN : 
		"<?php" > : DEFAULT
}

/** --- html --- */

<HTML_STATE>
TOKEN:
{
	< HTML_OPEN_TAG: "<" > : HTML_OPENING_TAG
}

<HTML_TAG_STATE>
TOKEN:
{
	< HTML_CLOSE_TAG: ">" > : HTML_STATE
}

<HTML_STATE>
TOKEN:
{
	< HTML_CLOSING_TAG: "</" > : HTML_OPENING_TAG
}

<HTML_OPENING_TAG>
TOKEN: /* HTML_TAG_NAME */
{
	< HTML_TAG_NAME: (<LETTER>)+ > : HTML_TAG_STATE
|
	< #LETTER: ["A"-"Z","a"-"z"] >
}

<HTML_TAG_STATE>
TOKEN:
{
	< HTML_ATTRIBUTE_NAME: (["A"-"Z","a"-"z"])+ >
}

<HTML_TAG_STATE>
TOKEN :
{
	< HTML_STRING:
		"\"" ("\\\"" | (~["\""]))+ "\"" >
}

<HTML_TAG_STATE>
TOKEN:
{
	< HTML_ATTRIBUTE_EQUALS : "=" >
}

<HTML_STATE>
TOKEN:
{
	< HTML_TEXT_BLOCK:
		(~["<"])+ >
}

<HTML_STATE>
TOKEN:
{
	< HTML_COMMENT_START: "<!--" > : HTML_WITHIN_COMMENT
}

/* order also matters: by placing this before the matchall, the comments will be properly ended. */
<HTML_WITHIN_COMMENT>
SKIP:
{
	< "-->" > : HTML_STATE
}

<HTML_WITHIN_COMMENT>
MORE:
{
	< ~[] >
}

/** Main production. */
SimpleNode Start() #Start : {}
{
	Block() { return jjtThis; }
}

void Block() : {}
{
	(
		HtmlBlock()
		| PhpRootBlock()
	)+
}

void PhpRootBlock() : {}
{
	<PHP_BLOCK_BEGIN>
	PhpBlock()
}

void PhpBlock() : {}
{
	( PhpStatement() 
	  | <PHP_SINGLE_COMMENT> 
	  | <PHP_MULTI_COMMENT> 
	  | PhpInlineHtmlBlock() )*
}

/** 
 * this is different to a normal HtmlBlock because these are actually in
 * function structures, e.g. if (true) { [html] }
 */
void PhpInlineHtmlBlock() : {}
{
	<PHP_BLOCK_END>
	(HtmlBlock() )*
	(<PHP_BLOCK_BEGIN> | <EOF> )
}

void PhpStatement() : {}
{
	PhpLanguageStatement() ";"
	| PhpIfStatement()
	| PhpFunctionDefinition() 
	| (<ACCESS_MODIFIER>)?
		( PhpClassDefinition() | PhpInterfaceDefinition() ) 
}

void PhpLanguageStatement() : {}
{
	<ECHO_STATEMENT> PhpValue()
	| <PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")"
	| <RETURN_STATEMENT> (PhpValue())?
	| <GLOBAL_STATEMENT> PhpVariableList()
	| <PHP_VARIABLE> "=" PhpValue()
}

void PhpValue() : {}
{
	(
	  <PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")"
	  | <NEW_STATEMENT> <PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")"
	  | <PHP_VARIABLE>
	  | <STRING>
	  | <DECIMAL>
	  | <HEXADECIMAL>
	  | <PHP_BUILTIN> )
	
	( <PHP_OPERATOR> PhpValue() )?			/* e.g. "f() + 42" */
}

void PhpSimpleValue() : {}
{
	<STRING> | <DECIMAL> | <HEXADECIMAL> | <PHP_BUILTIN>
}

void PhpArgumentList() : {}
{
	PhpValue() ("," PhpArgumentList())?
}

void PhpVariableList() : {}
{
	<PHP_VARIABLE> ("," PhpVariableList())?
}

void PhpFunctionDefinition() : {}
{
	<FUNCTION_STATEMENT> 
	<PHP_FUNCTION_NAME> "(" (PhpFunctionArgumentList()) ? ")"
	"{"
		PhpBlock()
	"}"
}

void PhpFunctionArgumentList() : {}
{
	<PHP_VARIABLE>
	( "=" PhpSimpleValue() )?
	( "," PhpFunctionArgumentList() )?
}

void PhpIfStatement() : {}
{
	<PHP_IF_STATEMENT> "(" PhpValue() ")" "{" PhpBlock() "}"
	( <PHP_ELSE_STATEMENT> "{" PhpBlock() "}" ) ?
}

void PhpClassDefinition() : {}
{
	<CLASS_STATEMENT> <PHP_FUNCTION_NAME>
	( 
		( <EXTENDS_STATEMENT> <PHP_FUNCTION_NAME>
			( <IMPLEMENTS_STATEMENT> PhpInterfaceList() )?
		)
		| ( <IMPLEMENTS_STATEMENT> PhpInterfaceList() 
			( <EXTENDS_STATEMENT> <PHP_FUNCTION_NAME> )?
		)
	)?
	"{"
		PhpClassBlock()
	"}"		
}

void PhpInterfaceDefinition() : {}
{
	<INTERFACE_STATEMENT> <PHP_FUNCTION_NAME>
	( 
		( <EXTENDS_STATEMENT> PhpInterfaceList() )
	)?
	"{"
		PhpInterfaceBlock()
	"}"		
}

void PhpInterfaceList() : {}
{
	<PHP_FUNCTION_NAME> ("," PhpInterfaceList())?
}

void PhpClassBlock() : {}
{
	(
		(<ACCESS_MODIFIER>)?
		(
			<VAR_STATEMENT> PhpFunctionArgumentList() ";"
			| PhpFunctionDefinition()
		)
	| <PHP_SINGLE_COMMENT>
	| <PHP_MULTI_COMMENT> )*
}

void PhpInterfaceBlock() : {}
{
	(
		(<ACCESS_MODIFIER>)?
		(
			<FUNCTION_STATEMENT> <PHP_FUNCTION_NAME> "(" (PhpFunctionArgumentList()) ? ")" ";"
		)
	| <PHP_SINGLE_COMMENT>
	| <PHP_MULTI_COMMENT> )*
}

void HtmlBlock() : {}
{
	HtmlTag() | HtmlClosingTag() | HtmlTextBlock() | HtmlComment()
}

void HtmlTag() #HtmlTag : { Token t; }
{
	<HTML_OPEN_TAG> 
	t = <HTML_TAG_NAME> {
		jjtThis.setName( t.image );
	}
	(HtmlTagAttribute()) *
	<HTML_CLOSE_TAG>
}

void HtmlClosingTag() #HtmlClosingTag : { Token t; }
{
	<HTML_CLOSING_TAG> 
	t = <HTML_TAG_NAME> {
		jjtThis.setName( t.image );
	} 
	<HTML_CLOSE_TAG>
}

void HtmlTagAttribute() #HtmlTagAttribute : { Token t; }
{
	t = <HTML_ATTRIBUTE_NAME> {
		jjtThis.setName( t.image );
	} 
	<HTML_ATTRIBUTE_EQUALS> 
	t = <HTML_STRING> {
		jjtThis.setValue( t.image );
	}
}

void HtmlTextBlock() #HtmlTextBlock : { Token t; }
{
	t = <HTML_TEXT_BLOCK> {
		jjtThis.setText( t.image );
	}
}

void HtmlComment() : {}
{
	<HTML_COMMENT_START>
}

