/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\ast.jj */
/*@egen*/
options {
             
               
  // NODE_DEFAULT_VOID=true; /* makes all nodes #void by default, reducing the number of elements generated */
}

PARSER_BEGIN(InternetApplication)

package org.openiaml.iacleaner.ast;

import java.util.*;
import java.io.*;

/** A grammar for web applications, maybe? */
public class InternetApplication/*@bgen(jjtree)*/implements InternetApplicationTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTInternetApplicationState jjtree = new JJTInternetApplicationState();

/*@egen*/

  public static InternetApplication instance = null;
  
  /**
   * For loading test cases programatically.
   */
  public static SimpleNode loadFile(File f, int initialState) throws ParseException, FileNotFoundException {
  	FileInputStream fis = new FileInputStream(f);
  	if (instance == null) {
  		instance = new InternetApplication(fis);
  	} else {
  		ReInit(fis);
  	}
  	InternetApplicationTokenManager.SwitchTo(initialState);
  	SimpleNode n;
  	if (initialState == JS_STATE) {
  		//System.err.println("JS_STATE");
 		n = StartJs();
  	} else {
  		//System.err.println("HTML_STATE");
  		n = Start();
  	}
  	return n;
  }

  /**
   * For loading test cases programatically.
   * Works out the initial state based on the file extension of the given
   * file.
   */
  public static SimpleNode loadFile(File f) throws ParseException, FileNotFoundException {
	  String extension = f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf("."));
	  
	  int initialState = 0;
	  if (extension.equals(".html") || extension.equals(".php")) {
	  	initialState = HTML_STATE;
	  } else if (extension.equals(".js")) {
	  	initialState = JS_STATE;
	  } else {
	  	throw new RuntimeException("Unknown file type: " + extension + " (from file: " + f + ")");
	  }
	  
	  return loadFile(f, initialState);
  }

  /**
   * Loading string sources.
   * 
   * @throws UnsupportedEncodingException if we have a problem with the charset encoding 
   */
  public static SimpleNode loadString(String s, String charset, int initialState) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
	  InputStream fis = new ByteArrayInputStream(s.getBytes(charset));
 	if (instance == null) {
  		instance = new InternetApplication(fis);
  	} else {
  		ReInit(fis);
  	}
  	InternetApplicationTokenManager.SwitchTo(initialState);
  	SimpleNode n;
  	if (initialState == JS_STATE) {
 		n = StartJs();
  	} else {
  		n = Start();
  	}
  	return n;
  }

  /** Loads string sources with a default state of HTML. */
  public static SimpleNode loadString(String s, String charset) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
  	return loadString(s, charset, HTML_STATE);
  }
  
}

PARSER_END(InternetApplication)

<HTML_STATE>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<HTML_TAG_STATE>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<HTML_OPENING_TAG>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<JS_STATE>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<DEFAULT>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* php reserved words */

TOKEN :
{
	< ECHO_STATEMENT: "echo" >
}

TOKEN :
{
	< FUNCTION_STATEMENT: "function" >
}

TOKEN :
{
	< RETURN_STATEMENT: "return" >
}

TOKEN :
{
	< GLOBAL_STATEMENT: "global" >
}

TOKEN :
{
	< NEW_STATEMENT: "new" >
}

TOKEN :
{
	< OR_STATEMENT: "or" >
}

TOKEN :
{
	< VAR_STATEMENT: "var" >
}

TOKEN :
{
	< CLASS_STATEMENT: "class" >
}

TOKEN :
{
	< INTERFACE_STATEMENT: "interface" >
}

TOKEN :
{
	< IMPLEMENTS_STATEMENT: "implements" >
}

TOKEN :
{
	< EXTENDS_STATEMENT: "extends" >
}

TOKEN :
{
	< ACCESS_MODIFIER: "public" | "private" | "protected" >
}

TOKEN : /* if statement */
{
	< PHP_IF_STATEMENT:
		"if" >
}

TOKEN : /* else statement */
{
	< PHP_ELSE_STATEMENT:
		"else" >
}

TOKEN : /* STRING */
{
	< STRING:
		"\"" ("\\\"" | (~["\""]))* "\"" >
}

TOKEN : /* STRING (single quoted) */
{
	< STRING_SQ:
		"'" ("\\'" | (~["'"]))* "'" >
}

TOKEN : /* Decimal */
{
	< DECIMAL:
		(["0"-"9"])+
		( "." (["0"-"9"]) * )? >	/* can have numbers after the decimal point */
}

TOKEN : /* Hexaecimal */
{
	< HEXADECIMAL:
		"0x" (["0"-"9","a"-"f"])+ >
}

TOKEN : /* built in variables */
{
	< PHP_BUILTIN:
		"true" | "false" | "null" >
}

TOKEN : /* Function name */
{
	< PHP_FUNCTION_NAME:
		["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

TOKEN : /* single line comment */
{
	< PHP_SINGLE_COMMENT:
		"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

<DEFAULT>
TOKEN: /* multi line comment */
{
	< PHP_MULTI_COMMENT: "/*" > : PHP_WITHIN_COMMENT
}

/* order also matters: by placing this before the matchall, the comments will be properly ended. */
<PHP_WITHIN_COMMENT>
SKIP:
{
	< "*/" > : DEFAULT
}

<PHP_WITHIN_COMMENT>
MORE:
{
	< ~[] >
}

TOKEN : /* variable */
{
	< PHP_VARIABLE:
		"$" 
		["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

TOKEN : /* operator */
{
	< PHP_OPERATOR:
		"+" | "-" | "*" | "/" | "%" | "." | "==" | "!=" | "<" | ">" | "<=" | ">=" | "->" >
}

TOKEN : /* prefix operator */
{
	< PHP_PREFIX_OPERATOR:
		"!" >
}

TOKEN :
{
	<PHP_BLOCK_END : 
		"?>" > : HTML_STATE
		
}

<HTML_STATE>
TOKEN :
{
	<PHP_BLOCK_BEGIN : 
		"<?php" > : DEFAULT
}

/** --- html --- */

<HTML_STATE>
TOKEN:
{
	< HTML_SCRIPT_TAG: "<script>" > : JS_STATE
}

<JS_STATE>
TOKEN:
{
	< HTML_SCRIPT_TAG_CLOSE: "</script>" > : HTML_STATE
}

<HTML_STATE>
TOKEN:
{
	< HTML_OPEN_TAG: "<" > : HTML_OPENING_TAG
}

<HTML_TAG_STATE>
TOKEN:
{
	< HTML_CLOSE_TAG: ">" > : HTML_STATE
}

<HTML_STATE>
TOKEN:
{
	< HTML_CLOSING_TAG: "</" > : HTML_OPENING_TAG
}

<HTML_OPENING_TAG>
TOKEN: /* HTML_TAG_NAME */
{
	< HTML_TAG_NAME: (<LETTER>)+ > : HTML_TAG_STATE
|
	< #LETTER: ["A"-"Z","a"-"z"] >
}

<HTML_TAG_STATE>
TOKEN:
{
	< HTML_ATTRIBUTE_NAME: (["A"-"Z","a"-"z"])+ >
}

<HTML_TAG_STATE>
TOKEN :
{
	< HTML_STRING:
		"\"" ("\\\"" | (~["\""]))+ "\"" >
}

<HTML_TAG_STATE>
TOKEN:
{
	< HTML_ATTRIBUTE_EQUALS : "=" >
}

<HTML_STATE>
TOKEN:
{
	< HTML_TEXT_BLOCK:
		(~["<"])+ >
}

<HTML_STATE>
TOKEN:
{
	< HTML_COMMENT_START: "<!--" > : HTML_WITHIN_COMMENT
}

/* order also matters: by placing this before the matchall, the comments will be properly ended. */
<HTML_WITHIN_COMMENT>
SKIP:
{
	< "-->" > : HTML_STATE
}

<HTML_WITHIN_COMMENT>
MORE:
{
	< ~[] >
}

/** --- javascript --- */
<JS_STATE>
TOKEN :
{
	< JS_FUNCTION_STATEMENT: "function" >
}

<JS_STATE>
TOKEN :
{
	< JS_RETURN_STATEMENT: "return" >
}

<JS_STATE>
TOKEN :
{
	< JS_NEW_STATEMENT: "new" >
}

<JS_STATE>
TOKEN :
{
	< JS_VAR_STATEMENT: "var" >
}

<JS_STATE>
TOKEN : /* if statement */
{
	< JS_IF_STATEMENT:
		"if" >
}

/**
 * if we use constants in the rules below, they cannot be reused
 * across different lexical states (I think)
 */
<JS_STATE>
TOKEN : { < JS_BRACKET_OPEN: "(" > }
<JS_STATE>
TOKEN : { < JS_BRACKET_CLOSE: ")" > }
<JS_STATE>
TOKEN : { < JS_BRACE_OPEN: "{" > }
<JS_STATE>
TOKEN : { < JS_BRACE_CLOSE: "}" > }
<JS_STATE>
TOKEN : { < JS_END: ";" > }
<JS_STATE>
TOKEN : { < JS_EQUAL: "=" > }
<JS_STATE>
TOKEN : { < JS_COMMA: "," > }

<JS_STATE>
TOKEN : /* else statement */
{
	< JS_ELSE_STATEMENT:
		"else" >
}

<JS_STATE>
TOKEN : /* STRING */
{
	< JS_STRING:
		"\"" ("\\\"" | (~["\""]))* "\"" >
}

<JS_STATE>
TOKEN : /* Decimal */
{
	< JS_DECIMAL:
		(["0"-"9"])+
		( "." (["0"-"9"]) * )? >	/* can have numbers after the decimal point */
}

<JS_STATE>
TOKEN : /* Hexaecimal */
{
	< JS_HEXADECIMAL:
		"0x" (["0"-"9","a"-"f"])+ >
}

<JS_STATE>
TOKEN : /* built in variables */
{
	< JS_BUILTIN:
		"true" | "false" | "null" >
}

<JS_STATE>
TOKEN : /* Function name */
{
	< JS_FUNCTION_NAME:
		["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

<JS_STATE>
TOKEN : /* single line comment */
{
	< JS_SINGLE_COMMENT:
		"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

<JS_STATE>
TOKEN: /* multi line comment */
{
	< JS_MULTI_COMMENT: "/*" > : JS_WITHIN_COMMENT
}

/* order also matters: by placing this before the matchall, the comments will be properly ended. */
<JS_WITHIN_COMMENT>
SKIP:
{
	< "*/" > : JS_STATE
}

<JS_WITHIN_COMMENT>
MORE:
{
	< ~[] >
}


<JS_STATE>
TOKEN : /* variable */
{
	< JS_VARIABLE:
		["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

<JS_STATE>
TOKEN : /* operator */
{
	< JS_OPERATOR:
		"+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" >
}

<JS_STATE>
TOKEN : /* operator */
{
	< JS_OBJECT_OPERATOR: "." >
}

/** Main production. */
SimpleNode Start() : {/*@bgen(jjtree) Start */
                       ASTStart jjtn000 = new ASTStart(JJTSTART);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ SimpleNode n; }
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Block() { n = jjtn000; }
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return n; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode StartJs() : {/*@bgen(jjtree) StartJs */
                         ASTStartJs jjtn000 = new ASTStartJs(JJTSTARTJS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ SimpleNode n; }
{/*@bgen(jjtree) StartJs */
        try {
/*@egen*/
	JsBlock() { n = jjtn000; }
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return n; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Block() : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	(
		HtmlBlock()
		| PhpRootBlock()
	)+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpRootBlock() : {/*@bgen(jjtree) PhpRootBlock */
  ASTPhpRootBlock jjtn000 = new ASTPhpRootBlock(JJTPHPROOTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpRootBlock */
        try {
/*@egen*/
	<PHP_BLOCK_BEGIN>
	PhpBlock()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpBlock() : {/*@bgen(jjtree) PhpBlock */
  ASTPhpBlock jjtn000 = new ASTPhpBlock(JJTPHPBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpBlock */
        try {
/*@egen*/
	( PhpStatement() 
	  | <PHP_SINGLE_COMMENT> 
	  | <PHP_MULTI_COMMENT> 
	  | PhpInlineHtmlBlock() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** 
 * this is different to a normal HtmlBlock because these are actually in
 * function structures, e.g. if (true) { [html] }
 */
void PhpInlineHtmlBlock() : {/*@bgen(jjtree) PhpInlineHtmlBlock */
  ASTPhpInlineHtmlBlock jjtn000 = new ASTPhpInlineHtmlBlock(JJTPHPINLINEHTMLBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpInlineHtmlBlock */
        try {
/*@egen*/
	<PHP_BLOCK_END>
	(HtmlBlock() )*
	(<PHP_BLOCK_BEGIN> | <EOF> )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpStatement() : {/*@bgen(jjtree) PhpStatement */
  ASTPhpStatement jjtn000 = new ASTPhpStatement(JJTPHPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpStatement */
        try {
/*@egen*/
	PhpFunctionDefinition() 
	| PhpLanguageStatement() ";"
	| PhpIfStatement()
	| (<ACCESS_MODIFIER>)?
		( PhpClassDefinition() | PhpInterfaceDefinition() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void PhpLanguageStatement() : {/*@bgen(jjtree) PhpLanguageStatement */
  ASTPhpLanguageStatement jjtn000 = new ASTPhpLanguageStatement(JJTPHPLANGUAGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpLanguageStatement */
        try {
/*@egen*/
	<ECHO_STATEMENT> PhpValue()
	| (<PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")"
		(PhpOrSomething()) ?)
	| <RETURN_STATEMENT> (PhpValue() (PhpOrSomething()) ?)?
	| <GLOBAL_STATEMENT> PhpVariableList()
	| <PHP_VARIABLE> "=" PhpValue() (PhpOrSomething()) ?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpOrSomething() : {/*@bgen(jjtree) PhpOrSomething */
  ASTPhpOrSomething jjtn000 = new ASTPhpOrSomething(JJTPHPORSOMETHING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpOrSomething */
        try {
/*@egen*/
	<OR_STATEMENT> <PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpValue() : {/*@bgen(jjtree) PhpValue */
  ASTPhpValue jjtn000 = new ASTPhpValue(JJTPHPVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpValue */
        try {
/*@egen*/
	(<PHP_PREFIX_OPERATOR>) *		/* e.g. !true */
	
	(
	  <PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")"
	  | <NEW_STATEMENT> <PHP_FUNCTION_NAME> "(" (PhpArgumentList())? ")"
	  | <PHP_VARIABLE>
	  | PhpSimpleValue() )
	
	( <PHP_OPERATOR> PhpValue() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/			/* e.g. "f() + 42" */
	
}

void PhpSimpleValue() : {/*@bgen(jjtree) PhpSimpleValue */
  ASTPhpSimpleValue jjtn000 = new ASTPhpSimpleValue(JJTPHPSIMPLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpSimpleValue */
        try {
/*@egen*/
	<STRING> | <STRING_SQ> | <DECIMAL> | <HEXADECIMAL> | <PHP_BUILTIN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpArgumentList() : {/*@bgen(jjtree) PhpArgumentList */
  ASTPhpArgumentList jjtn000 = new ASTPhpArgumentList(JJTPHPARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpArgumentList */
        try {
/*@egen*/
	PhpValue() ("," PhpArgumentList())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpVariableList() : {/*@bgen(jjtree) PhpVariableList */
  ASTPhpVariableList jjtn000 = new ASTPhpVariableList(JJTPHPVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpVariableList */
        try {
/*@egen*/
	<PHP_VARIABLE> ("," PhpVariableList())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpFunctionDefinition() : {/*@bgen(jjtree) PhpFunctionDefinition */
  ASTPhpFunctionDefinition jjtn000 = new ASTPhpFunctionDefinition(JJTPHPFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpFunctionDefinition */
        try {
/*@egen*/
	<FUNCTION_STATEMENT> 
	<PHP_FUNCTION_NAME> "(" (PhpFunctionArgumentList()) ? ")"
	"{"
		PhpBlock()
	"}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpFunctionArgumentList() : {/*@bgen(jjtree) PhpFunctionArgumentList */
  ASTPhpFunctionArgumentList jjtn000 = new ASTPhpFunctionArgumentList(JJTPHPFUNCTIONARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpFunctionArgumentList */
        try {
/*@egen*/
	<PHP_VARIABLE>
	( "=" PhpSimpleValue() )?
	( "," PhpFunctionArgumentList() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpIfStatement() : {/*@bgen(jjtree) PhpIfStatement */
  ASTPhpIfStatement jjtn000 = new ASTPhpIfStatement(JJTPHPIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpIfStatement */
        try {
/*@egen*/
	<PHP_IF_STATEMENT> "(" PhpValue() ")" "{" PhpBlock() "}"
	( <PHP_ELSE_STATEMENT> "{" PhpBlock() "}" ) ?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpClassDefinition() : {/*@bgen(jjtree) PhpClassDefinition */
  ASTPhpClassDefinition jjtn000 = new ASTPhpClassDefinition(JJTPHPCLASSDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpClassDefinition */
        try {
/*@egen*/
	<CLASS_STATEMENT> <PHP_FUNCTION_NAME>
	( 
		( <EXTENDS_STATEMENT> <PHP_FUNCTION_NAME>
			( <IMPLEMENTS_STATEMENT> PhpInterfaceList() )?
		)
		| ( <IMPLEMENTS_STATEMENT> PhpInterfaceList() 
			( <EXTENDS_STATEMENT> <PHP_FUNCTION_NAME> )?
		)
	)?
	"{"
		PhpClassBlock()
	"}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/		
}

void PhpInterfaceDefinition() : {/*@bgen(jjtree) PhpInterfaceDefinition */
  ASTPhpInterfaceDefinition jjtn000 = new ASTPhpInterfaceDefinition(JJTPHPINTERFACEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpInterfaceDefinition */
        try {
/*@egen*/
	<INTERFACE_STATEMENT> <PHP_FUNCTION_NAME>
	( 
		( <EXTENDS_STATEMENT> PhpInterfaceList() )
	)?
	"{"
		PhpInterfaceBlock()
	"}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/		
}

void PhpInterfaceList() : {/*@bgen(jjtree) PhpInterfaceList */
  ASTPhpInterfaceList jjtn000 = new ASTPhpInterfaceList(JJTPHPINTERFACELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpInterfaceList */
        try {
/*@egen*/
	<PHP_FUNCTION_NAME> ("," PhpInterfaceList())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpClassBlock() : {/*@bgen(jjtree) PhpClassBlock */
  ASTPhpClassBlock jjtn000 = new ASTPhpClassBlock(JJTPHPCLASSBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpClassBlock */
        try {
/*@egen*/
	(
		(<ACCESS_MODIFIER>)?
		(
			<VAR_STATEMENT> PhpFunctionArgumentList() ";"
			| PhpFunctionDefinition()
		)
	| <PHP_SINGLE_COMMENT>
	| <PHP_MULTI_COMMENT> )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PhpInterfaceBlock() : {/*@bgen(jjtree) PhpInterfaceBlock */
  ASTPhpInterfaceBlock jjtn000 = new ASTPhpInterfaceBlock(JJTPHPINTERFACEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpInterfaceBlock */
        try {
/*@egen*/
	(
		(<ACCESS_MODIFIER>)?
		(
			<FUNCTION_STATEMENT> <PHP_FUNCTION_NAME> "(" (PhpFunctionArgumentList()) ? ")" ";"
		)
	| <PHP_SINGLE_COMMENT>
	| <PHP_MULTI_COMMENT> )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HtmlBlock() : {/*@bgen(jjtree) HtmlBlock */
  ASTHtmlBlock jjtn000 = new ASTHtmlBlock(JJTHTMLBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HtmlBlock */
        try {
/*@egen*/
	HtmlScriptTag() |
	HtmlTag() | HtmlClosingTag() | HtmlTextBlock() | HtmlComment()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HtmlScriptTag() : {/*@bgen(jjtree) HtmlScriptTag */
  ASTHtmlScriptTag jjtn000 = new ASTHtmlScriptTag(JJTHTMLSCRIPTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HtmlScriptTag */
        try {
/*@egen*/
	<HTML_SCRIPT_TAG>
	JsBlock()
	<HTML_SCRIPT_TAG_CLOSE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HtmlTag()          : {/*@bgen(jjtree) HtmlTag */
                            ASTHtmlTag jjtn000 = new ASTHtmlTag(JJTHTMLTAG);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) HtmlTag */
        try {
/*@egen*/
	<HTML_OPEN_TAG> 
	t = <HTML_TAG_NAME> {
		jjtn000.setName( t.image );
	}
	(HtmlTagAttribute()) *
	<HTML_CLOSE_TAG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HtmlClosingTag()                 : {/*@bgen(jjtree) HtmlClosingTag */
                                          ASTHtmlClosingTag jjtn000 = new ASTHtmlClosingTag(JJTHTMLCLOSINGTAG);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) HtmlClosingTag */
        try {
/*@egen*/
	<HTML_CLOSING_TAG> 
	t = <HTML_TAG_NAME> {
		jjtn000.setName( t.image );
	} 
	<HTML_CLOSE_TAG>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HtmlTagAttribute()                   : {/*@bgen(jjtree) HtmlTagAttribute */
                                              ASTHtmlTagAttribute jjtn000 = new ASTHtmlTagAttribute(JJTHTMLTAGATTRIBUTE);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) HtmlTagAttribute */
        try {
/*@egen*/
	t = <HTML_ATTRIBUTE_NAME> {
		jjtn000.setName( t.image );
	} 
	<HTML_ATTRIBUTE_EQUALS> 
	t = <HTML_STRING>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {
		jjtn000.setValue( t.image );
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HtmlTextBlock()                : {/*@bgen(jjtree) HtmlTextBlock */
                                        ASTHtmlTextBlock jjtn000 = new ASTHtmlTextBlock(JJTHTMLTEXTBLOCK);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) HtmlTextBlock */
        try {
/*@egen*/
	t = <HTML_TEXT_BLOCK>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {
		jjtn000.setText( t.image );
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HtmlComment() : {/*@bgen(jjtree) HtmlComment */
  ASTHtmlComment jjtn000 = new ASTHtmlComment(JJTHTMLCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HtmlComment */
        try {
/*@egen*/
	<HTML_COMMENT_START>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** javascript stuff */
void JsBlock() : {/*@bgen(jjtree) JsBlock */
  ASTJsBlock jjtn000 = new ASTJsBlock(JJTJSBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsBlock */
        try {
/*@egen*/
	( JsStatement() 
	  | <JS_SINGLE_COMMENT> 
	  | <JS_MULTI_COMMENT> )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsStatement() : {/*@bgen(jjtree) JsStatement */
  ASTJsStatement jjtn000 = new ASTJsStatement(JJTJSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsStatement */
        try {
/*@egen*/
	JsFunctionDefinition() 
	| JsIfStatement()
	| JsLanguageStatement() <JS_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsLanguageStatement() : {/*@bgen(jjtree) JsLanguageStatement */
  ASTJsLanguageStatement jjtn000 = new ASTJsLanguageStatement(JJTJSLANGUAGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsLanguageStatement */
        try {
/*@egen*/
	JsFunctionCall()
	| JsReturnStatement()
	| JsVariableAssignment()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsFunctionCall() : {/*@bgen(jjtree) JsFunctionCall */
                          ASTJsFunctionCall jjtn000 = new ASTJsFunctionCall(JJTJSFUNCTIONCALL);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) JsFunctionCall */
        try {
/*@egen*/
	t = <JS_FUNCTION_NAME> { jjtn000.setName(t.image); }
		(
		<JS_BRACKET_OPEN> (JsArgumentList())? <JS_BRACKET_CLOSE>
		| <JS_OBJECT_OPERATOR> <JS_FUNCTION_NAME> <JS_BRACKET_OPEN> (JsArgumentList())? <JS_BRACKET_CLOSE>
		)
		( JsChainedOperator() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsReturnStatement() : {/*@bgen(jjtree) JsReturnStatement */
  ASTJsReturnStatement jjtn000 = new ASTJsReturnStatement(JJTJSRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsReturnStatement */
        try {
/*@egen*/
	<JS_RETURN_STATEMENT> (JsValue())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsVariableAssignment() : {/*@bgen(jjtree) JsVariableAssignment */
  ASTJsVariableAssignment jjtn000 = new ASTJsVariableAssignment(JJTJSVARIABLEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsVariableAssignment */
        try {
/*@egen*/
	<JS_VARIABLE> <JS_EQUAL> JsValue()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsChainedOperator() : {/*@bgen(jjtree) JsChainedOperator */
  ASTJsChainedOperator jjtn000 = new ASTJsChainedOperator(JJTJSCHAINEDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsChainedOperator */
        try {
/*@egen*/
	<JS_OBJECT_OPERATOR> <JS_FUNCTION_NAME> <JS_BRACKET_OPEN> (JsArgumentList())? <JS_BRACKET_CLOSE>
	( JsChainedOperator() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsValue() : {/*@bgen(jjtree) JsValue */
  ASTJsValue jjtn000 = new ASTJsValue(JJTJSVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsValue */
        try {
/*@egen*/
	(
	  <JS_FUNCTION_NAME> <JS_BRACKET_OPEN> (JsArgumentList())? <JS_BRACKET_CLOSE>
	  | <JS_NEW_STATEMENT> <JS_FUNCTION_NAME> <JS_BRACKET_OPEN> (JsArgumentList())? <JS_BRACKET_CLOSE>
	  | <JS_VARIABLE>
	  | <JS_STRING>
	  | <JS_DECIMAL>
	  | <JS_HEXADECIMAL>
	  | <JS_BUILTIN> )
	
	( <JS_OPERATOR> JsValue() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/			/* e.g. "f() + 42" */
}

void JsSimpleValue() : {/*@bgen(jjtree) JsSimpleValue */
  ASTJsSimpleValue jjtn000 = new ASTJsSimpleValue(JJTJSSIMPLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsSimpleValue */
        try {
/*@egen*/
	<JS_STRING> | <JS_DECIMAL> | <JS_HEXADECIMAL> | <JS_BUILTIN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsArgumentList() : {/*@bgen(jjtree) JsArgumentList */
  ASTJsArgumentList jjtn000 = new ASTJsArgumentList(JJTJSARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsArgumentList */
        try {
/*@egen*/
	JsValue() (<JS_COMMA> JsArgumentList())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsVariableList() : {/*@bgen(jjtree) JsVariableList */
  ASTJsVariableList jjtn000 = new ASTJsVariableList(JJTJSVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsVariableList */
        try {
/*@egen*/
	<JS_VARIABLE> (<JS_COMMA> JsVariableList())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsFunctionDefinition() : {/*@bgen(jjtree) JsFunctionDefinition */
  ASTJsFunctionDefinition jjtn000 = new ASTJsFunctionDefinition(JJTJSFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsFunctionDefinition */
        try {
/*@egen*/
	<JS_FUNCTION_STATEMENT> 
	<JS_FUNCTION_NAME> <JS_BRACKET_OPEN> (JsFunctionArgumentList()) ? <JS_BRACKET_CLOSE>
	<JS_BRACE_OPEN>
		JsBlock()
	<JS_BRACE_CLOSE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsFunctionArgumentList() : {/*@bgen(jjtree) JsFunctionArgumentList */
  ASTJsFunctionArgumentList jjtn000 = new ASTJsFunctionArgumentList(JJTJSFUNCTIONARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsFunctionArgumentList */
        try {
/*@egen*/
	<JS_VARIABLE>
	( <JS_EQUAL> JsSimpleValue() )?
	( <JS_COMMA> JsFunctionArgumentList() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void JsIfStatement() : {/*@bgen(jjtree) JsIfStatement */
  ASTJsIfStatement jjtn000 = new ASTJsIfStatement(JJTJSIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JsIfStatement */
        try {
/*@egen*/
	<JS_IF_STATEMENT> <JS_BRACKET_OPEN> JsValue() <JS_BRACKET_CLOSE> <JS_BRACE_OPEN> JsBlock() <JS_BRACE_CLOSE>
	( <JS_ELSE_STATEMENT> <JS_BRACE_OPEN> JsBlock() <JS_BRACE_CLOSE> ) ?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
