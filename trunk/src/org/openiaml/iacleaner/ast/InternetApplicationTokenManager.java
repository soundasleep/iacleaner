/* Generated By:JJTree&JavaCC: Do not edit this line. InternetApplicationTokenManager.java */
package org.openiaml.iacleaner.ast;
import java.util.*;
import java.io.*;

/** Token Manager. */
public class InternetApplicationTokenManager implements InternetApplicationConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000000000L) != 0L)
            return 34;
         if ((active0 & 0x2800000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 18;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 26;
         }
         if ((active0 & 0x793f6800000L) != 0L)
         {
            jjmatchedKind = 48;
            return 29;
         }
         if ((active0 & 0x4001000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 22;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            jjmatchedKind = 51;
            return -1;
         }
         if ((active1 & 0x80L) != 0L)
            return 61;
         return -1;
      case 1:
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
            return 17;
         }
         if ((active0 & 0x20010000000L) != 0L)
            return 29;
         if ((active0 & 0x5f3ef800000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
            return 29;
         }
         return -1;
      case 2:
         if ((active0 & 0x573c7800000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
            return 29;
         }
         if ((active0 & 0x8828000000L) != 0L)
            return 29;
         return -1;
      case 3:
         if ((active0 & 0x73c7000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active0 & 0x50000800000L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x4387000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
            return 29;
         }
         if ((active0 & 0x3040000000L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0x4381000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active0 & 0x6000000L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x181000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
            return 29;
         }
         if ((active0 & 0x4200000000L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 7;
            return 29;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 29;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_3(0, 52, 34);
      case 40:
         return jjStopAtPos(0, 69);
      case 41:
         return jjStopAtPos(0, 70);
      case 44:
         return jjStopAtPos(0, 78);
      case 47:
         return jjMoveStringLiteralDfa1_3(0x60000L);
      case 58:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_3(0x4000000000000L);
      case 59:
         return jjStopAtPos(0, 68);
      case 61:
         return jjStartNfaWithStates_3(0, 71, 61);
      case 63:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_3(0x20000000000000L);
      case 91:
         return jjStopAtPos(0, 76);
      case 93:
         return jjStopAtPos(0, 77);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x1040000000L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x50200800000L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x4001000000L);
      case 103:
         return jjMoveStringLiteralDfa1_3(0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x20180000000L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa1_3(0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x2800000000L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x20000000L);
      case 123:
         return jjStopAtPos(0, 72);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 47:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 58:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 62:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x1020000000L);
      case 99:
         return jjMoveStringLiteralDfa2_3(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0xa000000L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 41, 29);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0xc000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x40044000000L);
      case 109:
         return jjMoveStringLiteralDfa2_3(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa2_3(active0, 0x80000000L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_3(1, 28, 29);
         return jjMoveStringLiteralDfa2_3(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000L);
      case 120:
         return jjMoveStringLiteralDfa2_3(active0, 0x10200000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0, 0L);
}
static private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 39, 29);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_3(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x4001000000L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa3_3(active0, 0x100000000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(2, 29, 29);
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x40000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_3(active0, 0x1282000000L);
      case 119:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_3(2, 27, 29);
         break;
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(2, 35, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa4_3(active0, 0x1001000000L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 42, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0x280000000L);
      case 108:
         return jjMoveStringLiteralDfa4_3(active0, 0x100000000L);
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(3, 23, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_3(active0, 0x40000000L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 40, 29);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0x4000000L);
      case 101:
         return jjMoveStringLiteralDfa5_3(active0, 0x100000000L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 36, 29);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_3(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_3(active0, 0x200000000L);
      case 114:
         return jjMoveStringLiteralDfa5_3(active0, 0x82000000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(4, 30, 29);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_3(active0, 0x1000000L);
      case 119:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 37, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_3(active0, 0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa6_3(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa6_3(active0, 0x1000000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_3(5, 26, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0x4000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_3(active0, 0x100000000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(5, 25, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_3(active0, 0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa7_3(active0, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa7_3(active0, 0x1000000L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_3(6, 33, 29);
         break;
      case 121:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 38, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_3(active0, 0x80000000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_3(7, 24, 29);
         return jjMoveStringLiteralDfa8_3(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_3(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(8, 31, 29);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_3(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_3(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(9, 32, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(8, active0, 0L);
}
static private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  else if ((0x5000ec2000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 61)
                     jjCheckNAddTwoStates(34, 38);
                  else if (curChar == 33)
                     jjCheckNAdd(34);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 45)
                     jjCheckNAdd(38);
                  else if (curChar == 62)
                     jjCheckNAdd(34);
                  else if (curChar == 60)
                     jjCheckNAdd(34);
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 26:
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(29);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(29);
                  break;
               case 61:
                  if (curChar == 62)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(29);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(29);
                  break;
               case 1:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 4:
                  if (curChar == 34 && kind > 43)
                     kind = 43;
                  break;
               case 5:
               case 6:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 9:
                  if (curChar == 39 && kind > 44)
                     kind = 44;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar != 46)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(12);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 30:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if ((0x5000ec2000000000L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 34:
                  if (curChar == 61 && kind > 51)
                     kind = 51;
                  break;
               case 35:
                  if (curChar == 33)
                     jjCheckNAdd(34);
                  break;
               case 36:
                  if (curChar == 60)
                     jjCheckNAdd(34);
                  break;
               case 37:
                  if (curChar == 62)
                     jjCheckNAdd(34);
                  break;
               case 38:
                  if (curChar == 62 && kind > 51)
                     kind = 51;
                  break;
               case 39:
                  if (curChar == 45)
                     jjCheckNAdd(38);
                  break;
               case 40:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(34, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 112)
                     jjAddStates(6, 8);
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(16);
                  break;
               case 2:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  jjAddStates(3, 5);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  jjAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 120)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7e00000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(14);
                  break;
               case 16:
                  if (curChar == 101 && kind > 47)
                     kind = 47;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 115)
                     jjCheckNAdd(16);
                  break;
               case 21:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 108 && kind > 47)
                     kind = 47;
                  break;
               case 25:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(29);
                  break;
               case 31:
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(32);
                  break;
               case 41:
                  if (curChar == 112)
                     jjAddStates(6, 8);
                  break;
               case 42:
                  if (curChar == 99 && kind > 34)
                     kind = 34;
                  break;
               case 43:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 101 && kind > 34)
                     kind = 34;
                  break;
               case 48:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 100 && kind > 34)
                     kind = 34;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 5);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_6(0x4L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_6(active1, 0x4L);
      default :
         return 2;
   }
}
static private int jjMoveStringLiteralDfa2_6(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      default :
         return 3;
   }
   return 3;
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_1(0x200000000000000L);
      case 61:
         return jjStopAtPos(0, 63);
      case 62:
         return jjStopAtPos(0, 56);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, 0L);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 4:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 5:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  jjAddStates(9, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1eL) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 0);
      case 10:
         return jjStartNfaWithStates_0(0, 3, 0);
      case 13:
         return jjStartNfaWithStates_0(0, 4, 0);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 0);
      case 60:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x440000000000000L, 0x2L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 47:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 63:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(3, 65);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(4, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xefffffffffffffffL & l) == 0L)
                     break;
                  kind = 64;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 64;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
static private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x80000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      default :
         return 2;
   }
   return 2;
}
private static final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 59;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   7, 8, 9, 2, 3, 4, 46, 52, 60, 3, 4, 5, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\145\143\150\157", 
"\146\165\156\143\164\151\157\156", "\162\145\164\165\162\156", "\147\154\157\142\141\154", "\156\145\167", 
"\157\162", "\166\141\162", "\143\154\141\163\163", 
"\151\156\164\145\162\146\141\143\145", "\151\155\160\154\145\155\145\156\164\163", "\145\170\164\145\156\144\163", 
null, "\164\162\171", "\143\141\164\143\150", "\164\150\162\157\167", 
"\146\151\156\141\154\154\171", "\144\151\145", "\145\170\151\164", "\151\146", "\145\154\163\145", null, null, 
null, null, null, null, null, "\72\72", null, "\41", "\77\76", "\74\77\160\150\160", 
"\74", "\76", "\57\76", "\74\57", null, null, null, null, "\75", null, 
"\74\41\55\55", null, null, "\73", "\50", "\51", "\75", "\173", "\175", "\77", "\72", "\133", 
"\135", "\54", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "HTML_STATE", 
   "HTML_TAG_STATE", 
   "HTML_OPENING_TAG", 
   "DEFAULT", 
   "PHP_WITHIN_COMMENT", 
   "PHP_WITHIN_COMMENT_SINGLE", 
   "HTML_WITHIN_COMMENT", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 5, 3, -1, 3, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 0, 3, 2, 0, 0, 2, 1, -1, -1, -1, -1, -1, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xefffffffff800001L, 0x7ff3L, 
};
static final long[] jjtoSkip = {
   0x2ffffeL, 0x4L, 
};
static final long[] jjtoMore = {
   0x500000L, 0x8L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[61];
static private final int[] jjstateSet = new int[122];
static protected char curChar;
/** Constructor. */
public InternetApplicationTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public InternetApplicationTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 3;
static int defaultLexState = 3;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 20)
         {
            jjmatchedKind = 20;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 67)
         {
            jjmatchedKind = 67;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
