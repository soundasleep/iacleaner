/* Generated By:JJTree&JavaCC: Do not edit this line. InternetApplication.java */
package org.openiaml.iacleaner.ast;

import java.util.*;
import java.io.*;

/** A grammar for web applications, maybe? */
public class InternetApplication/*@bgen(jjtree)*/implements InternetApplicationTreeConstants, InternetApplicationConstants {/*@bgen(jjtree)*/
  protected static JJTInternetApplicationState jjtree = new JJTInternetApplicationState();
  public static InternetApplication instance = null;

  /**
   * For loading test cases programatically.
   */
  public static SimpleNode loadFile(File f, int initialState) throws ParseException, FileNotFoundException {
        FileInputStream fis = new FileInputStream(f);
        if (instance == null) {
                instance = new InternetApplication(fis);
        } else {
                ReInit(fis);
        }
        InternetApplicationTokenManager.SwitchTo(initialState);
        SimpleNode n;
        if (initialState == JS_STATE) {
                //System.err.println("JS_STATE");
                n = StartJs();
        } else {
                //System.err.println("HTML_STATE");
                n = Start();
        }
        return n;
  }

  /**
   * For loading test cases programatically.
   * Works out the initial state based on the file extension of the given
   * file.
   */
  public static SimpleNode loadFile(File f) throws ParseException, FileNotFoundException {
          String extension = f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf("."));

          int initialState = 0;
          if (extension.equals(".html") || extension.equals(".php")) {
                initialState = HTML_STATE;
          } else if (extension.equals(".js")) {
                initialState = JS_STATE;
          } else {
                throw new RuntimeException("Unknown file type: " + extension + " (from file: " + f + ")");
          }

          return loadFile(f, initialState);
  }

  /**
   * Loading string sources.
   * 
   * @throws UnsupportedEncodingException if we have a problem with the charset encoding 
   */
  public static SimpleNode loadString(String s, String charset, int initialState) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
          InputStream fis = new ByteArrayInputStream(s.getBytes(charset));
        if (instance == null) {
                instance = new InternetApplication(fis);
        } else {
                ReInit(fis);
        }
        InternetApplicationTokenManager.SwitchTo(initialState);
        SimpleNode n;
        if (initialState == JS_STATE) {
                n = StartJs();
        } else {
                n = Start();
        }
        return n;
  }

  /** Loads string sources with a default state of HTML. */
  public static SimpleNode loadString(String s, String charset) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
        return loadString(s, charset, HTML_STATE);
  }

/** Main production. */
  static final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
                       ASTStart jjtn000 = new ASTStart(JJTSTART);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);SimpleNode n;
    try {
      Block();
                  n = jjtn000;
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return n;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode StartJs() throws ParseException {
                        /*@bgen(jjtree) StartJs */
                         ASTStartJs jjtn000 = new ASTStartJs(JJTSTARTJS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);SimpleNode n;
    try {
      JsBlock();
                    n = jjtn000;
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return n;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Block() throws ParseException {
                /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_SCRIPT_TAG:
        case HTML_OPEN_TAG:
        case HTML_CLOSING_TAG:
        case HTML_TEXT_BLOCK:
        case HTML_COMMENT_START:
          HtmlBlock();
          break;
        case PHP_BLOCK_BEGIN:
          PhpRootBlock();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_BLOCK_BEGIN:
        case HTML_SCRIPT_TAG:
        case HTML_OPEN_TAG:
        case HTML_CLOSING_TAG:
        case HTML_TEXT_BLOCK:
        case HTML_COMMENT_START:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpRootBlock() throws ParseException {
                       /*@bgen(jjtree) PhpRootBlock */
  ASTPhpRootBlock jjtn000 = new ASTPhpRootBlock(JJTPHPROOTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_BLOCK_BEGIN);
      PhpBlock();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpBlock() throws ParseException {
                   /*@bgen(jjtree) PhpBlock */
  ASTPhpBlock jjtn000 = new ASTPhpBlock(JJTPHPBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ECHO_STATEMENT:
        case FUNCTION_STATEMENT:
        case RETURN_STATEMENT:
        case GLOBAL_STATEMENT:
        case CLASS_STATEMENT:
        case INTERFACE_STATEMENT:
        case ACCESS_MODIFIER:
        case PHP_TRY_STATEMENT:
        case PHP_THROW_STATEMENT:
        case PHP_DIE_STATEMENT:
        case PHP_IF_STATEMENT:
        case PHP_FUNCTION_NAME:
        case PHP_VARIABLE:
        case PHP_BLOCK_END:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ECHO_STATEMENT:
        case FUNCTION_STATEMENT:
        case RETURN_STATEMENT:
        case GLOBAL_STATEMENT:
        case CLASS_STATEMENT:
        case INTERFACE_STATEMENT:
        case ACCESS_MODIFIER:
        case PHP_TRY_STATEMENT:
        case PHP_THROW_STATEMENT:
        case PHP_DIE_STATEMENT:
        case PHP_IF_STATEMENT:
        case PHP_FUNCTION_NAME:
        case PHP_VARIABLE:
          PhpStatement();
          break;
        case PHP_BLOCK_END:
          PhpInlineHtmlBlock();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** 
 * this is different to a normal HtmlBlock because these are actually in
 * function structures, e.g. if (true) { [html] }
 */
  static final public void PhpInlineHtmlBlock() throws ParseException {
                             /*@bgen(jjtree) PhpInlineHtmlBlock */
  ASTPhpInlineHtmlBlock jjtn000 = new ASTPhpInlineHtmlBlock(JJTPHPINLINEHTMLBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_BLOCK_END);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_SCRIPT_TAG:
        case HTML_OPEN_TAG:
        case HTML_CLOSING_TAG:
        case HTML_TEXT_BLOCK:
        case HTML_COMMENT_START:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        HtmlBlock();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_BLOCK_BEGIN:
        jj_consume_token(PHP_BLOCK_BEGIN);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpStatement() throws ParseException {
                       /*@bgen(jjtree) PhpStatement */
  ASTPhpStatement jjtn000 = new ASTPhpStatement(JJTPHPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION_STATEMENT:
        PhpFunctionDefinition();
        break;
      case ECHO_STATEMENT:
      case RETURN_STATEMENT:
      case GLOBAL_STATEMENT:
      case PHP_THROW_STATEMENT:
      case PHP_DIE_STATEMENT:
      case PHP_FUNCTION_NAME:
      case PHP_VARIABLE:
        PhpLanguageStatement();
        jj_consume_token(106);
        break;
      case PHP_IF_STATEMENT:
        PhpIfStatement();
        break;
      case CLASS_STATEMENT:
      case INTERFACE_STATEMENT:
      case ACCESS_MODIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACCESS_MODIFIER:
          jj_consume_token(ACCESS_MODIFIER);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS_STATEMENT:
          PhpClassDefinition();
          break;
        case INTERFACE_STATEMENT:
          PhpInterfaceDefinition();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case PHP_TRY_STATEMENT:
        PhpTryCatchBlock();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpLanguageStatement() throws ParseException {
                               /*@bgen(jjtree) PhpLanguageStatement */
  ASTPhpLanguageStatement jjtn000 = new ASTPhpLanguageStatement(JJTPHPLANGUAGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ECHO_STATEMENT:
        jj_consume_token(ECHO_STATEMENT);
        PhpValuePossiblyWrapped();
        break;
      case PHP_THROW_STATEMENT:
        jj_consume_token(PHP_THROW_STATEMENT);
        PhpValue();
        break;
      case PHP_DIE_STATEMENT:
        jj_consume_token(PHP_DIE_STATEMENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_STATEMENT:
        case STRING:
        case STRING_SQ:
        case DECIMAL:
        case HEXADECIMAL:
        case PHP_BUILTIN:
        case PHP_FUNCTION_NAME:
        case PHP_VARIABLE:
        case PHP_PREFIX_OPERATOR:
        case 107:
          PhpValuePossiblyWrapped();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
      case PHP_FUNCTION_NAME:
        PhpFunctionCall();
        jj_consume_token(107);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_STATEMENT:
        case STRING:
        case STRING_SQ:
        case DECIMAL:
        case HEXADECIMAL:
        case PHP_BUILTIN:
        case PHP_FUNCTION_NAME:
        case PHP_VARIABLE:
        case PHP_PREFIX_OPERATOR:
        case 107:
          PhpArgumentList();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(108);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR_STATEMENT:
          PhpOrSomething();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      case RETURN_STATEMENT:
        jj_consume_token(RETURN_STATEMENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_STATEMENT:
        case STRING:
        case STRING_SQ:
        case DECIMAL:
        case HEXADECIMAL:
        case PHP_BUILTIN:
        case PHP_FUNCTION_NAME:
        case PHP_VARIABLE:
        case PHP_PREFIX_OPERATOR:
        case 107:
          PhpValuePossiblyWrapped();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR_STATEMENT:
            PhpOrSomething();
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
      case GLOBAL_STATEMENT:
        jj_consume_token(GLOBAL_STATEMENT);
        PhpVariableList();
        break;
      case PHP_VARIABLE:
        PhpVariableAssignment();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpVariableAssignment() throws ParseException {
                                /*@bgen(jjtree) PhpVariableAssignment */
  ASTPhpVariableAssignment jjtn000 = new ASTPhpVariableAssignment(JJTPHPVARIABLEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_VARIABLE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_OBJECT_OPERATOR:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        jj_consume_token(PHP_OBJECT_OPERATOR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_VARIABLE:
          jj_consume_token(PHP_VARIABLE);
          break;
        case PHP_FUNCTION_NAME:
          jj_consume_token(PHP_FUNCTION_NAME);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 114:
        PhpSelectArray();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(109);
      PhpValuePossiblyWrapped();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_STATEMENT:
        PhpOrSomething();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpFunctionCall() throws ParseException {
                          /*@bgen(jjtree) PhpFunctionCall */
  ASTPhpFunctionCall jjtn000 = new ASTPhpFunctionCall(JJTPHPFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_FUNCTION_NAME);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_OBJECT_OPERATOR:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_5;
        }
        jj_consume_token(PHP_OBJECT_OPERATOR);
        jj_consume_token(PHP_FUNCTION_NAME);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpOrSomething() throws ParseException {
                         /*@bgen(jjtree) PhpOrSomething */
  ASTPhpOrSomething jjtn000 = new ASTPhpOrSomething(JJTPHPORSOMETHING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OR_STATEMENT);
      jj_consume_token(PHP_FUNCTION_NAME);
      jj_consume_token(107);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW_STATEMENT:
      case STRING:
      case STRING_SQ:
      case DECIMAL:
      case HEXADECIMAL:
      case PHP_BUILTIN:
      case PHP_FUNCTION_NAME:
      case PHP_VARIABLE:
      case PHP_PREFIX_OPERATOR:
      case 107:
        PhpArgumentList();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(108);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpTryCatchBlock() throws ParseException {
                           /*@bgen(jjtree) PhpTryCatchBlock */
  ASTPhpTryCatchBlock jjtn000 = new ASTPhpTryCatchBlock(JJTPHPTRYCATCHBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_TRY_STATEMENT);
      jj_consume_token(110);
      PhpBlock();
      jj_consume_token(111);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_CATCH_STATEMENT:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
        jj_consume_token(PHP_CATCH_STATEMENT);
        jj_consume_token(107);
        jj_consume_token(PHP_FUNCTION_NAME);
        jj_consume_token(PHP_VARIABLE);
        jj_consume_token(108);
        jj_consume_token(110);
        PhpBlock();
        jj_consume_token(111);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_FINALLY_STATEMENT:
        jj_consume_token(PHP_FINALLY_STATEMENT);
        jj_consume_token(110);
        PhpBlock();
        jj_consume_token(111);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpValue() throws ParseException {
                   /*@bgen(jjtree) PhpValue */
  ASTPhpValue jjtn000 = new ASTPhpValue(JJTPHPVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_PREFIX_OPERATOR:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_7;
        }
        jj_consume_token(PHP_PREFIX_OPERATOR);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_FUNCTION_NAME:
        jj_consume_token(PHP_FUNCTION_NAME);
        jj_consume_token(107);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_STATEMENT:
        case STRING:
        case STRING_SQ:
        case DECIMAL:
        case HEXADECIMAL:
        case PHP_BUILTIN:
        case PHP_FUNCTION_NAME:
        case PHP_VARIABLE:
        case PHP_PREFIX_OPERATOR:
        case 107:
          PhpArgumentList();
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(108);
        break;
      case NEW_STATEMENT:
        jj_consume_token(NEW_STATEMENT);
        jj_consume_token(PHP_FUNCTION_NAME);
        jj_consume_token(107);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_STATEMENT:
        case STRING:
        case STRING_SQ:
        case DECIMAL:
        case HEXADECIMAL:
        case PHP_BUILTIN:
        case PHP_FUNCTION_NAME:
        case PHP_VARIABLE:
        case PHP_PREFIX_OPERATOR:
        case 107:
          PhpArgumentList();
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(108);
        break;
      case PHP_VARIABLE:
        jj_consume_token(PHP_VARIABLE);
        break;
      case STRING:
      case STRING_SQ:
      case DECIMAL:
      case HEXADECIMAL:
      case PHP_BUILTIN:
        PhpSimpleValue();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 114:
        PhpSelectArray();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpValuePossiblyWrapped() throws ParseException {
                                  /*@bgen(jjtree) PhpValuePossiblyWrapped */
  ASTPhpValuePossiblyWrapped jjtn000 = new ASTPhpValuePossiblyWrapped(JJTPHPVALUEPOSSIBLYWRAPPED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 107:
        jj_consume_token(107);
        PhpValuePossiblyWrapped();
        jj_consume_token(108);
        break;
      case NEW_STATEMENT:
      case STRING:
      case STRING_SQ:
      case DECIMAL:
      case HEXADECIMAL:
      case PHP_BUILTIN:
      case PHP_FUNCTION_NAME:
      case PHP_VARIABLE:
      case PHP_PREFIX_OPERATOR:
        PhpValue();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_OPERATOR:
      case 112:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_OPERATOR:
          jj_consume_token(PHP_OPERATOR);
          PhpValuePossiblyWrapped();
          break;
        case 112:
          jj_consume_token(112);
          PhpValuePossiblyWrapped();
          jj_consume_token(113);
          PhpValuePossiblyWrapped();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpSimpleValue() throws ParseException {
                         /*@bgen(jjtree) PhpSimpleValue */
  ASTPhpSimpleValue jjtn000 = new ASTPhpSimpleValue(JJTPHPSIMPLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case STRING_SQ:
        jj_consume_token(STRING_SQ);
        break;
      case DECIMAL:
        jj_consume_token(DECIMAL);
        break;
      case HEXADECIMAL:
        jj_consume_token(HEXADECIMAL);
        break;
      case PHP_BUILTIN:
        jj_consume_token(PHP_BUILTIN);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpSelectArray() throws ParseException {
                         /*@bgen(jjtree) PhpSelectArray */
  ASTPhpSelectArray jjtn000 = new ASTPhpSelectArray(JJTPHPSELECTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(114);
      PhpValuePossiblyWrapped();
      jj_consume_token(115);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 114:
        PhpSelectArray();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* this has a special case to allow for array(1,2,) */
  static final public void PhpArgumentList() throws ParseException {
                          /*@bgen(jjtree) PhpArgumentList */
  ASTPhpArgumentList jjtn000 = new ASTPhpArgumentList(JJTPHPARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PhpValuePossiblyWrapped();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        jj_consume_token(116);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_STATEMENT:
        case STRING:
        case STRING_SQ:
        case DECIMAL:
        case HEXADECIMAL:
        case PHP_BUILTIN:
        case PHP_FUNCTION_NAME:
        case PHP_VARIABLE:
        case PHP_PREFIX_OPERATOR:
        case 107:
          PhpArgumentList();
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpVariableList() throws ParseException {
                          /*@bgen(jjtree) PhpVariableList */
  ASTPhpVariableList jjtn000 = new ASTPhpVariableList(JJTPHPVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        jj_consume_token(116);
        PhpVariableList();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpFunctionDefinition() throws ParseException {
                                /*@bgen(jjtree) PhpFunctionDefinition */
  ASTPhpFunctionDefinition jjtn000 = new ASTPhpFunctionDefinition(JJTPHPFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION_STATEMENT);
      jj_consume_token(PHP_FUNCTION_NAME);
      jj_consume_token(107);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_VARIABLE:
        PhpFunctionArgumentList();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(108);
      jj_consume_token(110);
      PhpBlock();
      jj_consume_token(111);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpFunctionArgumentList() throws ParseException {
                                  /*@bgen(jjtree) PhpFunctionArgumentList */
  ASTPhpFunctionArgumentList jjtn000 = new ASTPhpFunctionArgumentList(JJTPHPFUNCTIONARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 109:
        jj_consume_token(109);
        PhpSimpleValue();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        jj_consume_token(116);
        PhpFunctionArgumentList();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpIfStatement() throws ParseException {
                         /*@bgen(jjtree) PhpIfStatement */
  ASTPhpIfStatement jjtn000 = new ASTPhpIfStatement(JJTPHPIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_IF_STATEMENT);
      jj_consume_token(107);
      PhpValuePossiblyWrapped();
      jj_consume_token(108);
      jj_consume_token(110);
      PhpBlock();
      jj_consume_token(111);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_ELSE_STATEMENT:
        jj_consume_token(PHP_ELSE_STATEMENT);
        jj_consume_token(110);
        PhpBlock();
        jj_consume_token(111);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpClassDefinition() throws ParseException {
                             /*@bgen(jjtree) PhpClassDefinition */
  ASTPhpClassDefinition jjtn000 = new ASTPhpClassDefinition(JJTPHPCLASSDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS_STATEMENT);
      jj_consume_token(PHP_FUNCTION_NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS_STATEMENT:
      case EXTENDS_STATEMENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS_STATEMENT:
          jj_consume_token(EXTENDS_STATEMENT);
          jj_consume_token(PHP_FUNCTION_NAME);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPLEMENTS_STATEMENT:
            jj_consume_token(IMPLEMENTS_STATEMENT);
            PhpInterfaceList();
            break;
          default:
            jj_la1[40] = jj_gen;
            ;
          }
          break;
        case IMPLEMENTS_STATEMENT:
          jj_consume_token(IMPLEMENTS_STATEMENT);
          PhpInterfaceList();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXTENDS_STATEMENT:
            jj_consume_token(EXTENDS_STATEMENT);
            jj_consume_token(PHP_FUNCTION_NAME);
            break;
          default:
            jj_la1[41] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(110);
      PhpClassBlock();
      jj_consume_token(111);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpInterfaceDefinition() throws ParseException {
                                 /*@bgen(jjtree) PhpInterfaceDefinition */
  ASTPhpInterfaceDefinition jjtn000 = new ASTPhpInterfaceDefinition(JJTPHPINTERFACEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTERFACE_STATEMENT);
      jj_consume_token(PHP_FUNCTION_NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS_STATEMENT:
        jj_consume_token(EXTENDS_STATEMENT);
        PhpInterfaceList();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(110);
      PhpInterfaceBlock();
      jj_consume_token(111);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpInterfaceList() throws ParseException {
                           /*@bgen(jjtree) PhpInterfaceList */
  ASTPhpInterfaceList jjtn000 = new ASTPhpInterfaceList(JJTPHPINTERFACELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PHP_FUNCTION_NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        jj_consume_token(116);
        PhpInterfaceList();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpClassBlock() throws ParseException {
                        /*@bgen(jjtree) PhpClassBlock */
  ASTPhpClassBlock jjtn000 = new ASTPhpClassBlock(JJTPHPCLASSBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION_STATEMENT:
        case VAR_STATEMENT:
        case ACCESS_MODIFIER:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACCESS_MODIFIER:
          jj_consume_token(ACCESS_MODIFIER);
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR_STATEMENT:
          jj_consume_token(VAR_STATEMENT);
          PhpFunctionArgumentList();
          jj_consume_token(106);
          break;
        case FUNCTION_STATEMENT:
          PhpFunctionDefinition();
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PhpInterfaceBlock() throws ParseException {
                            /*@bgen(jjtree) PhpInterfaceBlock */
  ASTPhpInterfaceBlock jjtn000 = new ASTPhpInterfaceBlock(JJTPHPINTERFACEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION_STATEMENT:
        case ACCESS_MODIFIER:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACCESS_MODIFIER:
          jj_consume_token(ACCESS_MODIFIER);
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        jj_consume_token(FUNCTION_STATEMENT);
        jj_consume_token(PHP_FUNCTION_NAME);
        jj_consume_token(107);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_VARIABLE:
          PhpFunctionArgumentList();
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        jj_consume_token(108);
        jj_consume_token(106);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlBlock() throws ParseException {
                    /*@bgen(jjtree) HtmlBlock */
  ASTHtmlBlock jjtn000 = new ASTHtmlBlock(JJTHTMLBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML_SCRIPT_TAG:
        HtmlScriptTag();
        break;
      case HTML_OPEN_TAG:
        HtmlTag();
        break;
      case HTML_CLOSING_TAG:
        HtmlClosingTag();
        break;
      case HTML_TEXT_BLOCK:
        HtmlTextBlock();
        break;
      case HTML_COMMENT_START:
        HtmlComment();
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlScriptTag() throws ParseException {
                        /*@bgen(jjtree) HtmlScriptTag */
  ASTHtmlScriptTag jjtn000 = new ASTHtmlScriptTag(JJTHTMLSCRIPTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HTML_SCRIPT_TAG);
      JsBlock();
      jj_consume_token(HTML_SCRIPT_TAG_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlTag() throws ParseException {
                           /*@bgen(jjtree) HtmlTag */
                            ASTHtmlTag jjtn000 = new ASTHtmlTag(JJTHTMLTAG);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(HTML_OPEN_TAG);
      t = jj_consume_token(HTML_TAG_NAME);
                jjtn000.setName( t.image );
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_ATTRIBUTE_NAME:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_10;
        }
        HtmlTagAttribute();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML_CLOSE_TAG:
        jj_consume_token(HTML_CLOSE_TAG);
        break;
      case HTML_CLOSE_TAG_XHTML:
        jj_consume_token(HTML_CLOSE_TAG_XHTML);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlClosingTag() throws ParseException {
                                         /*@bgen(jjtree) HtmlClosingTag */
                                          ASTHtmlClosingTag jjtn000 = new ASTHtmlClosingTag(JJTHTMLCLOSINGTAG);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(HTML_CLOSING_TAG);
      t = jj_consume_token(HTML_TAG_NAME);
                jjtn000.setName( t.image );
      jj_consume_token(HTML_CLOSE_TAG);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlTagAttribute() throws ParseException {
                                             /*@bgen(jjtree) HtmlTagAttribute */
                                              ASTHtmlTagAttribute jjtn000 = new ASTHtmlTagAttribute(JJTHTMLTAGATTRIBUTE);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HTML_ATTRIBUTE_NAME);
                jjtn000.setName( t.image );
      jj_consume_token(HTML_ATTRIBUTE_EQUALS);
      t = jj_consume_token(HTML_STRING);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                jjtn000.setValue( t.image );
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlTextBlock() throws ParseException {
                                       /*@bgen(jjtree) HtmlTextBlock */
                                        ASTHtmlTextBlock jjtn000 = new ASTHtmlTextBlock(JJTHTMLTEXTBLOCK);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HTML_TEXT_BLOCK);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                jjtn000.setText( t.image );
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HtmlComment() throws ParseException {
                      /*@bgen(jjtree) HtmlComment */
  ASTHtmlComment jjtn000 = new ASTHtmlComment(JJTHTMLCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HTML_COMMENT_START);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** javascript stuff */
  static final public void JsBlock() throws ParseException {
                  /*@bgen(jjtree) JsBlock */
  ASTJsBlock jjtn000 = new ASTJsBlock(JJTJSBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_FUNCTION_STATEMENT:
        case JS_RETURN_STATEMENT:
        case JS_NEW_STATEMENT:
        case JS_VAR_STATEMENT:
        case JS_IF_STATEMENT:
        case JS_FOR_STATEMENT:
        case JS_VARIABLE:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_11;
        }
        JsStatement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsStatement() throws ParseException {
                      /*@bgen(jjtree) JsStatement */
  ASTJsStatement jjtn000 = new ASTJsStatement(JJTJSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
        JsFunctionDefinition();
        break;
      case JS_IF_STATEMENT:
        JsIfStatement();
        break;
      case JS_FOR_STATEMENT:
        JsForStatement();
        break;
      case JS_RETURN_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_VAR_STATEMENT:
      case JS_VARIABLE:
        JsLanguageStatement();
        jj_consume_token(JS_END);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsLanguageStatement() throws ParseException {
                              /*@bgen(jjtree) JsLanguageStatement */
  ASTJsLanguageStatement jjtn000 = new ASTJsLanguageStatement(JJTJSLANGUAGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_RETURN_STATEMENT:
        JsReturnStatement();
        break;
      case JS_VAR_STATEMENT:
        jj_consume_token(JS_VAR_STATEMENT);
        jj_consume_token(JS_VARIABLE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_EQUAL:
          jj_consume_token(JS_EQUAL);
          JsValuePossiblyWrapped();
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        break;
      case JS_VARIABLE:
        jj_consume_token(JS_VARIABLE);
        JsTraverseObjects();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_ASSIGNMENT_OPERATOR:
        case JS_EQUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case JS_EQUAL:
            jj_consume_token(JS_EQUAL);
            break;
          case JS_ASSIGNMENT_OPERATOR:
            jj_consume_token(JS_ASSIGNMENT_OPERATOR);
            break;
          default:
            jj_la1[58] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          JsValuePossiblyWrapped();
          break;
        default:
          jj_la1[59] = jj_gen;
          ;
        }
        break;
      case JS_NEW_STATEMENT:
        JsNewStatement();
        JsTraverseObjects();
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsTraverseObjects() throws ParseException {
                            /*@bgen(jjtree) JsTraverseObjects */
  ASTJsTraverseObjects jjtn000 = new ASTJsTraverseObjects(JJTJSTRAVERSEOBJECTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_BRACKET_OPEN:
        case JS_OBJECT_OPERATOR:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_BRACKET_OPEN:
          jj_consume_token(JS_BRACKET_OPEN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case JS_FUNCTION_STATEMENT:
          case JS_NEW_STATEMENT:
          case JS_BRACKET_OPEN:
          case JS_BRACE_OPEN:
          case JS_STRING:
          case JS_STRING_SQ:
          case JS_DECIMAL:
          case JS_HEXADECIMAL:
          case JS_BUILTIN:
          case JS_VARIABLE:
            JsArgumentList();
            break;
          default:
            jj_la1[62] = jj_gen;
            ;
          }
          jj_consume_token(JS_BRACKET_CLOSE);
          break;
        case JS_OBJECT_OPERATOR:
          jj_consume_token(JS_OBJECT_OPERATOR);
          jj_consume_token(JS_VARIABLE);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsReturnStatement() throws ParseException {
                            /*@bgen(jjtree) JsReturnStatement */
  ASTJsReturnStatement jjtn000 = new ASTJsReturnStatement(JJTJSRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_RETURN_STATEMENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_BRACKET_OPEN:
      case JS_BRACE_OPEN:
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_VARIABLE:
        JsValuePossiblyWrapped();
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsNewStatement() throws ParseException {
                         /*@bgen(jjtree) JsNewStatement */
  ASTJsNewStatement jjtn000 = new ASTJsNewStatement(JJTJSNEWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_NEW_STATEMENT);
      jj_consume_token(JS_VARIABLE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsValue() throws ParseException {
                  /*@bgen(jjtree) JsValue */
  ASTJsValue jjtn000 = new ASTJsValue(JJTJSVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_VARIABLE:
        jj_consume_token(JS_VARIABLE);
        break;
      case JS_NEW_STATEMENT:
        JsNewStatement();
        break;
      case JS_FUNCTION_STATEMENT:
        JsAnonymousFunction();
        break;
      case JS_STRING:
        jj_consume_token(JS_STRING);
        break;
      case JS_STRING_SQ:
        jj_consume_token(JS_STRING_SQ);
        break;
      case JS_DECIMAL:
        jj_consume_token(JS_DECIMAL);
        break;
      case JS_HEXADECIMAL:
        jj_consume_token(JS_HEXADECIMAL);
        break;
      case JS_BUILTIN:
        jj_consume_token(JS_BUILTIN);
        break;
      case JS_BRACE_OPEN:
        jj_consume_token(JS_BRACE_OPEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_VARIABLE:
          JsInlineArray();
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        jj_consume_token(JS_BRACE_CLOSE);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      JsTraverseObjects();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsValuePossiblyWrapped() throws ParseException {
                                 /*@bgen(jjtree) JsValuePossiblyWrapped */
  ASTJsValuePossiblyWrapped jjtn000 = new ASTJsValuePossiblyWrapped(JJTJSVALUEPOSSIBLYWRAPPED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_BRACKET_OPEN:
        jj_consume_token(JS_BRACKET_OPEN);
        JsValuePossiblyWrapped();
        jj_consume_token(JS_BRACKET_CLOSE);
        break;
      case JS_FUNCTION_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_BRACE_OPEN:
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_VARIABLE:
        JsValue();
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_OPERATOR:
      case JS_ASSIGNMENT_OPERATOR:
      case JS_OPERATOR_SINGLE:
      case JS_EQUAL:
      case JS_TERNARY_1:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_OPERATOR:
          jj_consume_token(JS_OPERATOR);
          JsValuePossiblyWrapped();
          break;
        case JS_ASSIGNMENT_OPERATOR:
          jj_consume_token(JS_ASSIGNMENT_OPERATOR);
          JsValuePossiblyWrapped();
          break;
        case JS_EQUAL:
          jj_consume_token(JS_EQUAL);
          JsValuePossiblyWrapped();
          break;
        case JS_TERNARY_1:
          jj_consume_token(JS_TERNARY_1);
          JsValuePossiblyWrapped();
          jj_consume_token(JS_TERNARY_2);
          JsValuePossiblyWrapped();
          break;
        case JS_OPERATOR_SINGLE:
          jj_consume_token(JS_OPERATOR_SINGLE);
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsSimpleValue() throws ParseException {
                        /*@bgen(jjtree) JsSimpleValue */
  ASTJsSimpleValue jjtn000 = new ASTJsSimpleValue(JJTJSSIMPLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_STRING:
        jj_consume_token(JS_STRING);
        break;
      case JS_DECIMAL:
        jj_consume_token(JS_DECIMAL);
        break;
      case JS_HEXADECIMAL:
        jj_consume_token(JS_HEXADECIMAL);
        break;
      case JS_BUILTIN:
        jj_consume_token(JS_BUILTIN);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsArgumentList() throws ParseException {
                         /*@bgen(jjtree) JsArgumentList */
  ASTJsArgumentList jjtn000 = new ASTJsArgumentList(JJTJSARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JsValuePossiblyWrapped();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsArgumentList();
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsVariableList() throws ParseException {
                         /*@bgen(jjtree) JsVariableList */
  ASTJsVariableList jjtn000 = new ASTJsVariableList(JJTJSVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsVariableList();
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsFunctionDefinition() throws ParseException {
                               /*@bgen(jjtree) JsFunctionDefinition */
  ASTJsFunctionDefinition jjtn000 = new ASTJsFunctionDefinition(JJTJSFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_FUNCTION_STATEMENT);
      jj_consume_token(JS_VARIABLE);
      jj_consume_token(JS_BRACKET_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_VARIABLE:
        JsFunctionArgumentList();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(JS_BRACKET_CLOSE);
      jj_consume_token(JS_BRACE_OPEN);
      JsBlock();
      jj_consume_token(JS_BRACE_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsFunctionArgumentList() throws ParseException {
                                 /*@bgen(jjtree) JsFunctionArgumentList */
  ASTJsFunctionArgumentList jjtn000 = new ASTJsFunctionArgumentList(JJTJSFUNCTIONARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_EQUAL:
        jj_consume_token(JS_EQUAL);
        JsSimpleValue();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsFunctionArgumentList();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsAnonymousFunction() throws ParseException {
                              /*@bgen(jjtree) JsAnonymousFunction */
  ASTJsAnonymousFunction jjtn000 = new ASTJsAnonymousFunction(JJTJSANONYMOUSFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_FUNCTION_STATEMENT);
      jj_consume_token(JS_BRACKET_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_VARIABLE:
        JsFunctionArgumentList();
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      jj_consume_token(JS_BRACKET_CLOSE);
      jj_consume_token(JS_BRACE_OPEN);
      JsBlock();
      jj_consume_token(JS_BRACE_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsIfStatement() throws ParseException {
                        /*@bgen(jjtree) JsIfStatement */
  ASTJsIfStatement jjtn000 = new ASTJsIfStatement(JJTJSIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_IF_STATEMENT);
      jj_consume_token(JS_BRACKET_OPEN);
      JsValuePossiblyWrapped();
      jj_consume_token(JS_BRACKET_CLOSE);
      jj_consume_token(JS_BRACE_OPEN);
      JsBlock();
      jj_consume_token(JS_BRACE_CLOSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_ELSE_STATEMENT:
        jj_consume_token(JS_ELSE_STATEMENT);
        jj_consume_token(JS_BRACE_OPEN);
        JsBlock();
        jj_consume_token(JS_BRACE_CLOSE);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsForStatement() throws ParseException {
                         /*@bgen(jjtree) JsForStatement */
  ASTJsForStatement jjtn000 = new ASTJsForStatement(JJTJSFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_FOR_STATEMENT);
      jj_consume_token(JS_BRACKET_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_RETURN_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_VAR_STATEMENT:
      case JS_VARIABLE:
        JsForParameterList();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      jj_consume_token(JS_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_BRACKET_OPEN:
      case JS_BRACE_OPEN:
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_VARIABLE:
        JsForEvaluateParameterList();
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      jj_consume_token(JS_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_FUNCTION_STATEMENT:
      case JS_NEW_STATEMENT:
      case JS_BRACKET_OPEN:
      case JS_BRACE_OPEN:
      case JS_STRING:
      case JS_STRING_SQ:
      case JS_DECIMAL:
      case JS_HEXADECIMAL:
      case JS_BUILTIN:
      case JS_VARIABLE:
        JsForEvaluateParameterList();
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      jj_consume_token(JS_BRACKET_CLOSE);
      jj_consume_token(JS_BRACE_OPEN);
      JsBlock();
      jj_consume_token(JS_BRACE_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsForParameterList() throws ParseException {
                             /*@bgen(jjtree) JsForParameterList */
  ASTJsForParameterList jjtn000 = new ASTJsForParameterList(JJTJSFORPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JsLanguageStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsForParameterList();
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void JsForEvaluateParameterList() throws ParseException {
                                     /*@bgen(jjtree) JsForEvaluateParameterList */
  ASTJsForEvaluateParameterList jjtn000 = new ASTJsForEvaluateParameterList(JJTJSFOREVALUATEPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JsValuePossiblyWrapped();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        JsForEvaluateParameterList();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* inline arrays: { a:3, b:function() {...}, c:"kittens", } */
  static final public void JsInlineArray() throws ParseException {
                        /*@bgen(jjtree) JsInlineArray */
  ASTJsInlineArray jjtn000 = new ASTJsInlineArray(JJTJSINLINEARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JS_VARIABLE);
      jj_consume_token(JS_TERNARY_2);
      JsValuePossiblyWrapped();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JS_COMMA:
        jj_consume_token(JS_COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JS_VARIABLE:
          JsInlineArray();
          break;
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public InternetApplicationTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[85];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x8c0ab31e,0x8c0ab31e,0x0,0x0,0x1000,0x300,0xc0ab31e,0x4fe00020,0x4fe00020,0x40,0x40,0x4fe00020,0xc02801a,0x10000000,0xc000000,0x0,0x40,0x10000000,0x4fe00020,0x4000,0x10000,0x40000000,0x4fe00020,0x4fe00020,0xfe00020,0x0,0x4fe00020,0x20000000,0x20000000,0x3e00000,0x0,0x4fe00020,0x0,0x0,0x8000000,0x0,0x0,0x100000,0x400,0x800,0xc00,0xc00,0x800,0x0,0x1084,0x1000,0x84,0x1004,0x1000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x304b,0x304b,0x0,0x0,0x304a,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x304a,0x200,0x30,0x3f0000,0x3f0000,0x0,0x0,0x0,0xe0000,0x400000,0xe1450000,0x400000,0xe1450000,0x0,0xe1050000,0xe1450000,0x0,0x0,0xa0000000,0x8000000,0x8000000,0x0,0x0,0x8000000,0x0,0x10000000,0xe0000,0xe1450000,0xe1450000,0x8000000,0x8000000,0x0,0x8000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x0,0x0,0x800,0x0,0x0,0x0,0x40000,0x0,0x0,0x800,0x0,0x0,0x0,0x800,0x800,0x0,0x40000,0x800,0x10000,0x10000,0x0,0x40000,0x800,0x100000,0x100000,0x0,0x2000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x80,0xa0,0xa0,0x4,0x8,0x7,0x8,0x7,0x4,0x7,0x7,0x1f0,0x1f0,0x3,0x0,0x0,0x4,0x80,0x0,0x4,0x0,0x4,0x7,0x7,0x0,0x0,0x4,0x0,};
   }

  /** Constructor with InputStream. */
  public InternetApplication(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public InternetApplication(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new InternetApplicationTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public InternetApplication(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new InternetApplicationTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public InternetApplication(InternetApplicationTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(InternetApplicationTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[117];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 85; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 117; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
